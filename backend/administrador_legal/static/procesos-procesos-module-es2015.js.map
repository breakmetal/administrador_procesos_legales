{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","./src/app/modulos/procesos/actuaciones/agregar-actuacion/agregar-actuacion.component.ts","./src/app/modulos/procesos/actuaciones/agregar-actuacion/agregar-actuacion.component.html","./src/app/modulos/procesos/actuaciones/listar-actuaciones/listar-actuaciones.component.ts","./src/app/modulos/procesos/actuaciones/listar-actuaciones/listar-actuaciones.component.html","./src/app/modulos/procesos/actuaciones/mostrar-actuacion/mostrar-actuacion.component.ts","./src/app/modulos/procesos/actuaciones/mostrar-actuacion/mostrar-actuacion.component.html","./src/app/modulos/procesos/archivos/agregar-archivo/agregar-archivo.component.ts","./src/app/modulos/procesos/archivos/agregar-archivo/agregar-archivo.component.html","./src/app/modulos/procesos/archivos/listar-archivos/listar-archivos.component.ts","./src/app/modulos/procesos/archivos/listar-archivos/listar-archivos.component.html","./src/app/modulos/procesos/calutelares/agregar-cautelar/agregar-cautelar.component.ts","./src/app/modulos/procesos/calutelares/agregar-cautelar/agregar-cautelar.component.html","./src/app/modulos/procesos/calutelares/listar-cautelar/listar-cautelar.component.ts","./src/app/modulos/procesos/calutelares/listar-cautelar/listar-cautelar.component.html","./src/app/modulos/procesos/calutelares/mostrar-cautelar/mostrar-cautelar.component.ts","./src/app/modulos/procesos/calutelares/mostrar-cautelar/mostrar-cautelar.component.html","./src/app/modulos/procesos/despachos/despacho/despacho.component.ts","./src/app/modulos/procesos/despachos/despacho/despacho.component.html","./src/app/modulos/procesos/ejecutivo/agregar-ejecutivo/agregar-ejecutivo.component.ts","./src/app/modulos/procesos/ejecutivo/agregar-ejecutivo/agregar-ejecutivo.component.html","./src/app/modulos/procesos/notificaciones/agregar-notificacion/agregar-notificacion.component.ts","./src/app/modulos/procesos/notificaciones/agregar-notificacion/agregar-notificacion.component.html","./src/app/modulos/procesos/notificaciones/empresas-notificadas/empresas-notificadas.component.ts","./src/app/modulos/procesos/notificaciones/empresas-notificadas/empresas-notificadas.component.html","./src/app/modulos/procesos/notificaciones/listar-notificaciones/listar-notificaciones.component.ts","./src/app/modulos/procesos/notificaciones/listar-notificaciones/listar-notificaciones.component.html","./src/app/modulos/procesos/notificaciones/mostrar-notificacion/mostrar-notificacion.component.ts","./src/app/modulos/procesos/notificaciones/mostrar-notificacion/mostrar-notificacion.component.html","./src/app/modulos/procesos/notificaciones/personas-notificadas/personas-notificadas.component.ts","./src/app/modulos/procesos/notificaciones/personas-notificadas/personas-notificadas.component.html","./src/app/modulos/procesos/partes_proceso/partes-juridicas/partes-juridicas.component.ts","./src/app/modulos/procesos/partes_proceso/partes-juridicas/partes-juridicas.component.html","./src/app/modulos/procesos/partes_proceso/partes/partes.component.ts","./src/app/modulos/procesos/partes_proceso/partes/partes.component.html","./src/app/modulos/procesos/pipes/archivo-nombre.pipe.ts","./src/app/modulos/procesos/proceso/agregar-proceso/agregar-proceso.component.ts","./src/app/modulos/procesos/proceso/agregar-proceso/agregar-proceso.component.html","./src/app/modulos/procesos/proceso/listar-procesos/listar-procesos.component.ts","./src/app/modulos/procesos/proceso/listar-procesos/listar-procesos.component.html","./src/app/modulos/procesos/proceso/mostrar-proceso/mostrar-proceso.component.ts","./src/app/modulos/procesos/proceso/mostrar-proceso/mostrar-proceso.component.html","./src/app/modulos/procesos/procesos-routing.module.ts","./src/app/modulos/procesos/procesos.module.ts","./src/app/modulos/procesos/servicios/proceso.service.ts","./src/app/modulos/procesos/todas-mis-notificaciones/todas-mis-notificaciones.component.ts","./src/app/modulos/procesos/todas-mis-notificaciones/todas-mis-notificaciones.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwH;AACnD;AACP;AACjB;;AAE7C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACwC;AACW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,eAAe,mFAAqB,QAAQ;AAClE;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF,oBAAoB,+DAAwB,EAAE,wFAAwF,iBAAiB,yCAAyC,kEAA2B,GAAG;AAC9N;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAuBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAY;AACrD;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,mFAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,kBAAkB,mFAAqB,WAAW;AAC9E;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8DAA8D,oCAAoC,+DAAwB,oBAAoB,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,kFAAgC,GAAG;AAC9P,wBAAwB,+DAAwB,EAAE,qGAAqG,6CAA6C,YAAY,+FAA+F,6CAA6C,gEAAyB;AACrX;AACA;AACA,aAAa,sCAAsC;AACnD,aAAa;AACb;AACA;AACA,KAAK,mCAAmC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AAChF,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,kFAAyB;AACrC;AACA;AACA,cAAc,OAAO,oDAAM,EAAE;AAC7B,cAAc,OAAO,oDAAM,EAAE;AAC7B,iBAAiB,OAAO,oDAAM,EAAE;AAChC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,OAAO,+DAAwB,EAAE,GAAG,OAAO,kFAAgC,EAAE,EAAE,EAAE,GAAG;AACvG,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAkEV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,0BAA0B,8DAAuB,EAAE,2BAA2B;AAC9E,0BAA0B,8DAAuB,EAAE,kDAAkD,wCAAwC,EAAE,EAAE;AACjJ,cAAc,oDAAoD,gEAAyB,sBAAsB;AACjH;AACA,2BAA2B,EAAE,EAAE;AAC/B,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAE8D;;AAE9D,qC;;;;;;;;;;;;AC/bA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACD;AACgO;AACxD;AAC5J;AACjB;AACoB;AAC1B;AAC8B;AAC1B;AACF;AACE;AACJ;AACyB;AACF;;AAE1E;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACwC;AACE;AACK;AACH;AACK;AACM;;AAEvD;AACA,0DAA0D;AAC1D,IAAI,4DAAqB;AACzB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,kCAAkC,iFAAkB;AACpD;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,WAAW,EAMV;AACD;AACA;AACA,UAAU;AACV;AACA,6CAA6C,4DAAc;AAC3D;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,oCAAoC,iDAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,uCAAuC;AACzD;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iCAAiC,oCA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WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,iEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE,KAAK,kDAAK;AACxD,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,kDAAK;AAC5B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAI,KAAK,iEAAS;AACxC,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gCAAgC,mCAAmC;AACnE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qCAAqC,mFAAqB;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,yCAAyC,4EAAc;AACvD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,kDAAK,kEAAkE,8DAAM;AAC5F,oBAAoB;AACpB;AACA;AACA,gDAAgD,8DAAM;AACtD,wBAAwB;AACxB;AACA;AACA,YAAY,+CAAE;AACd;AACA,QAAQ,2DAAG;AACX,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,kCAAkC,+EAAwB;AAC1D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,kDAAK,aAAa,EAAE,KAAK,sDAAS,yCAAyC,EAAE,KAAK,sDAAS;AAC1G,kBAAkB,8DAAM;AACxB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAM;AAC9B;AACA;AACA,6CAA6C,2DAAK;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,2CAA2C,8DAAQ,gBAAgB,gEAAU;AAC7E,8CAA8C,yDAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,2BAA2B,4FAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,uFAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,oEAAoE,4DAAI;AACxE,mBAAmB,EAAE;AACrB,qEAAqE,2DAAG;AACxE,oBAAoB;AACpB;AACA;AACA;AACA;AACA,QAAQ,6DAAK;AACb;AACA,eAAe,kDAAK;AACpB;AACA;AACA;AACA,QAAQ,iEAAS;AACjB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,4DAAI;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+BAA+B,mEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,sCAAsC,4DAAM,uBAAuB,8DAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,+CAA+C,+BAA+B;AAC9E;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,0EAA0E;AACvF,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,sFAAsF;AACnG,aAAa;AACb;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAA0C,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,4DAAc,GAAG,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,oCAAoC,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,CAAC,4EAAc,MAAM,+DAAwB,CAAC,wDAAQ,MAAM,+DAAwB,CAAC,qEAAoB,GAAG;AAC/kB,8BAA8B,+DAAwB,EAAE,iPAAiP;AACzS,QAAQ,wDAAiB,0EAA0E,2BAA2B,EAAE,qEAAqE,yBAAyB,EAAE,6EAA6E,iCAAiC,EAAE,iFAAiF,mCAAmC,EAAE;AACtc,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,gTAAgT,mDAAmD,gEAAyB,qCAAqC,kEAA2B,GAAG;AACjd;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,4DAAO,EAAE;AACrB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,gCAAgC,OAAO,oDAAM,6CAA6C,GAAG;AAClG,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,OAAO,0EAAY,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,4EAAc,IAAI,GAAG,OAAO,kDAAI,EAAE,GAAG;AACvH,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9F,KAAK,OAAO,qEAAa;AACzB;AACA;AACA,oBAAoB,OAAO,mDAAK,8BAA8B;AAC9D,gBAAgB,OAAO,mDAAK,sCAAsC;AAClE,mBAAmB,OAAO,mDAAK,yCAAyC;AACxE,6BAA6B,OAAO,mDAAK,2BAA2B;AACpE,4BAA4B,OAAO,mDAAK,sCAAsC;AAC9E;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG,OAAO,4DAAc,EAAE,GAAG,OAAO,8DAAuB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,+DAAwB,EAAE,GAAG;AACtL,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG,OAAO,gEAAqB;AAC/C,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,OAAO,0EAAmB;AAC7C,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B,uBAAuB,4EAAc;AACrC,aAAa;AACb,sBAAsB,kDAAI;AAC1B,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,qEAAoB,EAAE,EAAE,EAAE,GAAG;AACvD,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAgLV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,6BAA6B,8DAAuB,EAAE,8BAA8B;AACpF,6BAA6B,8DAAuB,EAAE,qDAAqD,2CAA2C,EAAE,6EAA6E,sEAAe,EAAE,kEAAa,EAAE,sEAAe,EAAE,4DAAY;AAClS,QAAQ,sEAAe;AACvB,QAAQ,sEAAe,GAAG;AAC1B,cAAc,oDAAoD,gEAAyB,yBAAyB,4BAA4B;AAChJ;AACA,+BAA+B,EAAE,wBAAwB,SAAS,sEAAe,EAAE,kEAAa,EAAE,sEAAe,EAAE,4DAAY,EAAE,EAAE,wBAAwB;AAC3J,QAAQ,sEAAe;AACvB;AACA;AACA,QAAQ,sEAAe,EAAE,EAAE,EAAE,EAAE,EAAE;AACjC,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA,0BAA0B,sEAAe,EAAE,kEAAa,EAAE,sEAAe,EAAE,4DAAY;AACvF;AACA;AACA,oBAAoB,sEAAe;AACnC;AACA;AACA,oBAAoB,sEAAe;AACnC;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEuc;;AAEvc,wC;;;;;;;;;;;;AC5kDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuH;AAC/C;AACV;AACA;AACe;;AAE7E;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AAC2B;AACI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,2BAA2B,4EAAa;AACxC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAS;AACrB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wBAAwB,mFAAqB;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,0BAA0B;AACjD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,qBAAqB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,mFAAqB;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6EAA6E,YAAY;AACzF;AACA;AACA,0EAA0E,aAAa;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,+DAAoB,GAAG,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,0FAAqB,MAAM;AAChT,gBAAgB,+DAAwB,EAAE,sJAAsJ;AAChM,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,kUAAkU,aAAa,wEAAiC,EAAE,kEAA2B,GAAG;AACla;AACA;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,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iC,0DAAY;AAC7C;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA,sCAAsC,4CAAO;AAC7C;AACA;AACA;AACA;AACA,qCAAqC,2EAAoB;AACzD,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,mFAAqB;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,gEAAS,aAAa,EAAE,cAAc,6DAAM;AACzE,wBAAwB;AACxB;AACA,oDAAoD,2DAAI;AACxD,wBAAwB;AACxB;AACA;AACA,mCAAmC,kEAAc;AACjD,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,qBAAqB,+DAA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EAAE,wBAAwB;AAC/I;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE,EAAE,EAAE,EAAE;AAC1C,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA,0BAA0B,4DAAY,EAAE,yEAAkB,EAAE,gEAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEkT;;AAElT,qC;;;;;;;;;;;;ACnqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiP;AACpI;AAC5D;AACa;AACO;AAClB;AAC0B;;AAE7E;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACwC;AACI;AACO;AACF;;AAEjD;AACA,yBAAyB,SAAS,sBAAsB;AACxD;AACA,mCAAmC;AACnC,WAAW,EAGV;AACD,WAAW,EAAE;AACb,sCAAsC,4DAAc;AACpD;AACA;AACA,CAAC;AACD;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,mBAAmB;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,CAAC,+DAAwB,GAAG;AAC7I,qBAAqB,+DAAwB,EAAE,kIAAkI;AACjL,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,oEAAoE,iJAAiJ,YAAY,mBAAmB,0CAA0C,gEAAyB,6CAA6C;AAC3W;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,cAAc,OAAO,oDAAM,EAAE;AAC7B,eAAe,OAAO,6DAAe,SAAS,gEAAU;AACxD,4BAA4B;AAC5B;AACA,yCAAyC,oBAAoB,IAAI;AACjE,aAAa,OAAO,mDAAK,EAAE;AAC3B,YAAY,OAAO,mDAAK,EAAE;AAC1B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,aAAa,OAAO,mDAAK,EAAE;AAC3B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,+DAAwB,EAAE,EAAE,EAAE,GAAG;AACvE,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC,mBAAmB,gEAAU;AAC7B,wCAAwC;AACxC,wDAAwD,oBAAoB;AAC5E,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAgFV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAKV;AACD;AACA;AACA,WAAW,EAAE;AACb,iCAAiC,iFAAkB,CAAC,4EAAa;AACjE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,mFAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,mFAAqB;AAC/C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,WAAW,0BAA0B,QAAQ;AAChE;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AAC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vF;AACE;AACW;AAC+B;AAChB;;AAE7E;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACwC;AACI;AACA;AACK;AACA;;AAEjD;AACA;AACA;AACA,yBAAyB,SAAS,sBAAsB;AACxD;AACA,yCAAyC;AACzC,WAAW,EAaV;AACD;AACA;AACA,UAAU;AACV;AACA,6CAA6C,4DAAc;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA,YAAY,4BAA4B;AACxC,CAAC;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAGV;AACD,WAAW,EAAE;AACb,iCAAiC,4EAAa,CAAC,yEAAU,CAAC,iFAAkB,CAAC,4EAAa;AAC1F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,gBAAgB,EAAE;AAClB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,kBAAkB,mFAAqB,QAAQ;AACxE;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wBAAwB,mFAAqB;AAC7C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,WAAW,0BAA0B,QAAQ;AAChE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AAC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","file":"procesos-procesos-module-es2015.js","sourcesContent":["import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkAccordion.ngAcceptInputType_multi;\n    /**\n     * Emits when the state of the accordion changes\n     * @type {?}\n     */\n    CdkAccordion.prototype._stateChanges;\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     * @type {?}\n     */\n    CdkAccordion.prototype._openCloseAllActions;\n    /**\n     * A readonly id value to use for unique selection coordination.\n     * @type {?}\n     */\n    CdkAccordion.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordion.prototype._multi;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n * @type {?}\n */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} accordionId\n             * @return {?}\n             */\n            (id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            }));\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 * @type {?}\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe((/**\n         * @param {?} expanded\n         * @return {?}\n         */\n        expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        }));\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_expanded;\n    /** @type {?} */\n    CdkAccordionItem.ngAcceptInputType_disabled;\n    /**\n     * Subscription to openAll/closeAll events.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._openCloseAllSubscription;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.closed;\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.opened;\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.destroyed;\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.expandedChange;\n    /**\n     * The unique AccordionItem id.\n     * @type {?}\n     */\n    CdkAccordionItem.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._disabled;\n    /**\n     * Unregister function for _expansionDispatcher.\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._removeUniqueSelectionListener;\n    /** @type {?} */\n    CdkAccordionItem.prototype.accordion;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAccordionItem.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkAccordionItem.prototype._expansionDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion,\n        CdkAccordionItem], exports: [CdkAccordion,\n        CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r6.id)(\"ngClass\", ctx_r6._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.option;\n}\n/**\n * Event object that is emitted when an autocomplete option is activated.\n * @record\n */\nfunction MatAutocompleteActivatedEvent() { }\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteActivatedEvent.prototype.option;\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Default `mat-autocomplete` options that can be overridden.\n * @record\n */\nfunction MatAutocompleteDefaultOptions() { }\nif (false) {\n    /**\n     * Whether the first option should be highlighted when an autocomplete panel is opened.\n     * @type {?|undefined}\n     */\n    MatAutocompleteDefaultOptions.prototype.autoActiveFirstOption;\n}\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Emits whenever an option is activated using the keyboard.\n         */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        }));\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_autoActiveFirstOption;\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._activeOptionChanges;\n    /**\n     * Manages active item in option list based on key events.\n     * @type {?}\n     */\n    MatAutocomplete.prototype._keyManager;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.showPanel;\n    /** @type {?} */\n    MatAutocomplete.prototype._isOpen;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.template;\n    /**\n     * Element for the panel containing the autocomplete options.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panel;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.options;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionGroups;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panelWidth;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionSelected;\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.opened;\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.closed;\n    /**\n     * Emits whenever an option is activated using the keyboard.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionActivated;\n    /** @type {?} */\n    MatAutocomplete.prototype._classList;\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-origin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    MatAutocompleteOrigin.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        /** @type {?} */\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        /** @type {?} */\n        const panelClass = 'mat-autocomplete-panel-above';\n        /** @type {?} */\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocompleteTrigger.ngAcceptInputType_autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._componentDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._scrollStrategy;\n    /**\n     * Old value of the native input. Used to work around issues with the `input` event on IE.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._previousValue;\n    /**\n     * Strategy that is used to position the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._positionStrategy;\n    /**\n     * Whether or not the label state is being overridden.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._manuallyFloatingLabel;\n    /**\n     * The subscription for closing actions (some are bound to document).\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closingActionsSubscription;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._canOpenOnNextFocus;\n    /**\n     * Whether the element is inside of a ShadowRoot component.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._isInsideShadowRoot;\n    /**\n     * Stream of keyboard events that can close the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._windowBlurHandler;\n    /**\n     * `View -> model callback called when value changes`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onChange;\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onTouched;\n    /**\n     * The autocomplete panel to be attached to this trigger.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.position;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocompleteAttribute;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayAttached;\n    /**\n     * Stream of autocomplete option selections.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.optionSelections;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._formField;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete,\n        MatOptionModule,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","import { isDevMode, Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/badge.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?} _renderer\n     * @param {?=} _animationMode\n     */\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n        if (isDevMode()) {\n            /** @type {?} */\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            /** @type {?} */\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const contentChange = changes['content'];\n        if (contentChange) {\n            /** @type {?} */\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     * @return {?}\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @private\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @private\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const badgeElement = this._renderer.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        /** @type {?} */\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    badgeElement.classList.add(activeClass);\n                }));\n            }));\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @private\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @private\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /**\n     * Clears any existing badges that might be left over from server-side rendering.\n     * @private\n     * @param {?} cssClass\n     * @return {?}\n     */\n    _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            /** @type {?} */\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_hidden;\n    /** @type {?} */\n    MatBadge.ngAcceptInputType_overlap;\n    /**\n     * Whether the badge has any content.\n     * @type {?}\n     */\n    MatBadge.prototype._hasContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._color;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     * @type {?}\n     */\n    MatBadge.prototype.position;\n    /**\n     * The content for the badge\n     * @type {?}\n     */\n    MatBadge.prototype.content;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._description;\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     * @type {?}\n     */\n    MatBadge.prototype.size;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._hidden;\n    /**\n     * Unique id for the badge\n     * @type {?}\n     */\n    MatBadge.prototype._id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._badgeElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._ariaDescriber;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatBadge.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/badge-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); }, imports: [[\n            A11yModule,\n            MatCommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/badge/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, hasModifierKey, SPACE, HOME, END } from '@angular/cdk/keycodes';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/accordion-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base interface for a `MatAccordion`.\n * \\@docs-private\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nconst _c3 = function (a0, a1) { return { collapsedHeight: a0, expandedHeight: a1 }; };\nconst _c4 = function (a0, a1) { return { value: a0, params: a1 }; };\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    const ctx_r19 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r19._getExpandedState());\n} }\nconst _c5 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c6 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nfunction MatAccordionBase() { }\nif (false) {\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @type {?}\n     */\n    MatAccordionBase.prototype.hideToggle;\n    /**\n     * Display mode used for all expansion panels in the accordion.\n     * @type {?}\n     */\n    MatAccordionBase.prototype.displayMode;\n    /**\n     * The position of the expansion indicator.\n     * @type {?}\n     */\n    MatAccordionBase.prototype.togglePosition;\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @type {?}\n     */\n    MatAccordionBase.prototype._handleHeaderKeydown;\n    /**\n     * Handles focus events on the panel headers.\n     * @type {?}\n     */\n    MatAccordionBase.prototype._handleHeaderFocus;\n}\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\nconst matExpansionAnimations = {\n    /**\n     * Animation that rotates the indicator arrow.\n     */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /**\n     * Animation that expands and collapses the panel header height.\n     */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /**\n     * Animation that expands and collapses the panel content.\n     */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    /**\n     * @param {?} _template\n     */\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\n/** @nocollapse */\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    MatExpansionPanelContent.prototype._template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\nlet uniqueId = 0;\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n * @record\n */\nfunction MatExpansionPanelDefaultOptions() { }\nif (false) {\n    /**\n     * Height of the header while the panel is expanded.\n     * @type {?}\n     */\n    MatExpansionPanelDefaultOptions.prototype.expandedHeight;\n    /**\n     * Height of the header while the panel is collapsed.\n     * @type {?}\n     */\n    MatExpansionPanelDefaultOptions.prototype.collapsedHeight;\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @type {?}\n     */\n    MatExpansionPanelDefaultOptions.prototype.hideToggle;\n}\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?} _animationMode\n     * @param {?=} defaultOptions\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /**\n         * An event emitted after the body's expansion animation happens.\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * An event emitted after the body's collapse animation happens.\n         */\n        this.afterCollapse = new EventEmitter();\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /**\n         * Stream of body animation done events.\n         */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        }));\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * The position of the expansion indicator.\n     * @return {?}\n     */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * Toggles the expanded state of the expansion panel.\n     * @return {?}\n     */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /**\n     * Sets the expanded state of the expansion panel to false.\n     * @return {?}\n     */\n    close() {\n        this.expanded = false;\n    }\n    /**\n     * Sets the expanded state of the expansion panel to true.\n     * @return {?}\n     */\n    open() {\n        this.expanded = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith((/** @type {?} */ (null))), filter((/**\n             * @return {?}\n             */\n            () => this.expanded && !this._portal)), take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            }));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    _containsFocus() {\n        if (this._body) {\n            /** @type {?} */\n            const focusedElement = this._document.activeElement;\n            /** @type {?} */\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n    _body: [{ type: ViewChild, args: ['body',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatExpansionPanel.ngAcceptInputType_hideToggle;\n    /** @type {?} */\n    MatExpansionPanel.ngAcceptInputType_expanded;\n    /** @type {?} */\n    MatExpansionPanel.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanel.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanel.prototype._hideToggle;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanel.prototype._togglePosition;\n    /**\n     * An event emitted after the body's expansion animation happens.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.afterExpand;\n    /**\n     * An event emitted after the body's collapse animation happens.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.afterCollapse;\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._inputChanges;\n    /**\n     * Optionally defined accordion the expansion panel belongs to.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.accordion;\n    /**\n     * Content that will be rendered lazily.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._lazyContent;\n    /**\n     * Element containing the panel's user-provided content.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._body;\n    /**\n     * Portal holding the user's content.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._portal;\n    /**\n     * ID for the associated header element. Used for a11y labelling.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._headerId;\n    /**\n     * Stream of body animation done events.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._bodyAnimationDone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanel.prototype._viewContainerRef;\n    /** @type {?} */\n    MatExpansionPanel.prototype._animationMode;\n}\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultOptions\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /**\n         * Whether Angular animations in the panel header should be disabled.\n         */\n        this._animationsDisabled = true;\n        /** @type {?} */\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => !!(changes['hideToggle'] || changes['togglePosition'])))) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            }))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._changeDetectorRef.markForCheck()));\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter((/**\n         * @return {?}\n         */\n        () => panel._containsFocus())))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => _focusMonitor.focusVia(_element, 'program')));\n        _focusMonitor.monitor(_element).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(this);\n            }\n        }));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _animationStarted() {\n        // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n        // there to work around a bug in Angular (see #13088), however this introduces a different\n        // issue. The new transition will cause the header to animate in on init (see #16067), if the\n        // consumer has set a header height that is different from the default one. We work around it\n        // by disabling animations on the header and re-enabling them after the first animation has run.\n        // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n        // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n        // for https://github.com/angular/angular/issues/18847 to be resolved.\n        this._animationsDisabled = false;\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets the toggle position for the header.\n     * @return {?}\n     */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 19, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@expansionHeight.start\", function MatExpansionPanelHeader_animation_expansionHeight_start_HostBindingHandler() { return ctx._animationStarted(); });\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@.disabled\", ctx._animationsDisabled)(\"@expansionHeight\", ɵngcc0.ɵɵpureFunction2(16, _c4, ctx._getExpandedState(), ɵngcc0.ɵɵpureFunction2(13, _c3, ctx.collapsedHeight, ctx.expandedHeight)));\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\");\n    } }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c6, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c5);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n            matExpansionAnimations.expansionHeaderHeight\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                    matExpansionAnimations.expansionHeaderHeight\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                    '[@.disabled]': '_animationsDisabled',\n                    '(@expansionHeight.start)': '_animationStarted()',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanelHeader.prototype._parentChangeSubscription;\n    /**\n     * Whether Angular animations in the panel header should be disabled.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype._animationsDisabled;\n    /**\n     * Height of the header while the panel is expanded.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.expandedHeight;\n    /**\n     * Height of the header while the panel is collapsed.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.collapsedHeight;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype.panel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanelHeader.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanelHeader.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], null, null); })();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /**\n         * Headers belonging to this accordion.\n         */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /**\n         * The position of the expansion indicator.\n         */\n        this.togglePosition = 'after';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((/**\n         * @param {?} headers\n         * @return {?}\n         */\n        (headers) => {\n            this._ownHeaders.reset(headers.filter((/**\n             * @param {?} header\n             * @return {?}\n             */\n            header => header.panel.accordion === this)));\n            this._ownHeaders.notifyOnChanges();\n        }));\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleHeaderKeydown(event) {\n        const { keyCode } = event;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME) {\n            if (!hasModifierKey(event)) {\n                manager.setFirstItemActive();\n                event.preventDefault();\n            }\n        }\n        else if (keyCode === END) {\n            if (!hasModifierKey(event)) {\n                manager.setLastItemActive();\n                event.preventDefault();\n            }\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n}\nMatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\nconst ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAccordion.ngAcceptInputType_hideToggle;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAccordion.prototype._keyManager;\n    /**\n     * Headers belonging to this accordion.\n     * @type {?}\n     * @private\n     */\n    MatAccordion.prototype._ownHeaders;\n    /**\n     * All headers inside the accordion. Includes headers inside nested accordions.\n     * @type {?}\n     */\n    MatAccordion.prototype._headers;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAccordion.prototype._hideToggle;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     * @type {?}\n     */\n    MatAccordion.prototype.displayMode;\n    /**\n     * The position of the expansion indicator.\n     * @type {?}\n     */\n    MatAccordion.prototype.togglePosition;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent]; }, imports: function () { return [CommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n\n//# sourceMappingURL=expansion.js.map","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, ContentChildren, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, ElementRef, Inject, ViewChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nfunction MatRadioDefaultOptions() { }\nif (false) {\n    /** @type {?} */\n    MatRadioDefaultOptions.prototype.color;\n}\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatRadioGroup)),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatRadioButton that emits the change event.\n     * @type {?}\n     */\n    MatRadioChange.prototype.source;\n    /**\n     * The value of the MatRadioButton.\n     * @type {?}\n     */\n    MatRadioChange.prototype.value;\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            }));\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => radio._markForCheck()));\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" }, exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR])] });\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nMatRadioGroup.propDecorators = {\n    change: [{ type: Output }],\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatRadioButton)), { descendants: true },] }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatRadioButton)), { descendants: true }]\n        }], color: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_required;\n    /**\n     * Selected value for the radio group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._value;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._name;\n    /**\n     * The currently selected radio button. Should match value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._selected;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._isInitialized;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._labelPosition;\n    /**\n     * Whether the radio group is disabled.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._disabled;\n    /**\n     * Whether the radio group is required.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._required;\n    /**\n     * The method to be called in order to update ngModel\n     * @type {?}\n     */\n    MatRadioGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     * @type {?}\n     */\n    MatRadioGroup.prototype.onTouched;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    MatRadioGroup.prototype.change;\n    /**\n     * Child radio buttons.\n     * @type {?}\n     */\n    MatRadioGroup.prototype._radios;\n    /**\n     * Theme color for all of the radio buttons in the group.\n     * @type {?}\n     */\n    MatRadioGroup.prototype.color;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatRadioButtonBase.prototype.disabled;\n    /** @type {?} */\n    MatRadioButtonBase.prototype._elementRef;\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     * @param {?=} _providerOverride\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} name\n             * @return {?}\n             */\n            (id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            }));\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /**\n     * Sets the disabled state and marks for check if a change occurred.\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8)); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], viewQuery: function MatRadioButton_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r14 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r14)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n];\nMatRadioButton.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatRadioButton.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatRadioButton.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatRadioButton.ngAcceptInputType_required;\n    /** @type {?} */\n    MatRadioButton.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._uniqueId;\n    /**\n     * The unique ID for the radio button.\n     * @type {?}\n     */\n    MatRadioButton.prototype.id;\n    /**\n     * Analog to HTML 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    MatRadioButton.prototype.name;\n    /**\n     * Used to set the 'aria-label' attribute on the underlying input element.\n     * @type {?}\n     */\n    MatRadioButton.prototype.ariaLabel;\n    /**\n     * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n     * @type {?}\n     */\n    MatRadioButton.prototype.ariaLabelledby;\n    /**\n     * The 'aria-describedby' attribute is read after the element's label and field type.\n     * @type {?}\n     */\n    MatRadioButton.prototype.ariaDescribedby;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._labelPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._color;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    MatRadioButton.prototype.change;\n    /**\n     * The parent radio group. May or may not be present.\n     * @type {?}\n     */\n    MatRadioButton.prototype.radioGroup;\n    /**\n     * Whether this radio is checked.\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._checked;\n    /**\n     * Whether this radio is disabled.\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._disabled;\n    /**\n     * Whether this radio is required.\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._required;\n    /**\n     * Value assigned to this radio.\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._value;\n    /**\n     * Unregister function for _radioDispatcher\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._removeUniqueSelectionListener;\n    /**\n     * The native `<input type=radio>` element\n     * @type {?}\n     */\n    MatRadioButton.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatRadioButton.prototype._changeDetector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._radioDispatcher;\n    /** @type {?} */\n    MatRadioButton.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioButton.prototype._providerOverride;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); }, imports: [[MatRippleModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup,\n        MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup,\n        MatRadioButton,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n\n//# sourceMappingURL=radio.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r26 = ɵngcc0.ɵɵreference(1);\n        const _r30 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r30.textContent || !_r30.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r26)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-actuacion',\n  templateUrl: './agregar-actuacion.component.html',\n  styleUrls: ['./agregar-actuacion.component.css']\n})\nexport class AgregarActuacionComponent implements OnInit {\n  private accion: string;\n  actuacion : any;\n  id : number;\n  private proceso : number;\n  form = new FormGroup({\n    proceso :  new FormControl(),\n    actuacion :  new FormControl('', [\n      Validators.required,\n      Validators.pattern('[^`~!@$%^&*()_|+\\=?;:,.]+$')\n    ]),\n    anotacion :  new FormControl('', [\n      Validators.required,\n      Validators.pattern('[^`~!@$%^&*()_|+\\=?;:,.]+$')\n    ]),\n    inicio :  new FormControl('', [\n      Validators.required\n    ]),\n    termino :  new FormControl('', [\n      Validators.required\n    ]),\n    registro:  new FormControl('', [\n      Validators.required\n    ]),\n\n  })\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    this.form.controls['proceso'].setValue(this.proceso)\n    if(this.accion === 'actualizar'){\n      this.inicializar()\n      console.log('actualizando')\n    }else{\n      this.proceso =+ this.route.snapshot.paramMap.get('proceso')\n      this.form.controls['proceso'].setValue(this.proceso)\n    }\n  }\n  private inicializar(){\n    this.id =+  this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarActuacion(this.id).subscribe(data => {\n      this.form.controls['proceso'].setValue(data['proceso'])\n      this.form.controls['actuacion'].setValue(data['actuacion'])\n      this.form.controls['anotacion'].setValue(data['anotacion'])\n      this.form.controls['inicio'].setValue(data['inicio'])\n      this.form.controls['termino'].setValue(data['termino'])\n      this.form.controls['registro'].setValue(data['registro'])\n      \n    })\n  }\n\n  volver(): void{\n    this.location.back()\n  }\n\n\n  registrar():void{\n    if (this.accion === 'actualizar') {\n      this.procesoService.actualizarActuacion(this.form.value, this.id).subscribe(data => console.log(data))\n    } else {\n      this.procesoService.agregarActuacion(this.form.value).subscribe(data => this.volver())\n    }\n    \n  }\n\n}\n","<mat-card>\n<form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n  <div>\n    <span class=\"titulo\">Datos generales</span>\n  </div>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Actuacion</mat-label>\n    <input formControlName='actuacion' matInput>\n    <mat-error *ngIf=\"form.get('actuacion').hasError('required')\">\n      <strong>Este campo es obligatorio</strong>\n    </mat-error>\n    <mat-error *ngIf=\"form.get('actuacion').hasError('pattern')\">\n      <strong>los caracteres especiales no estan permitidos</strong>\n    </mat-error>\n  </mat-form-field>\n  \n  <mat-form-field appearance=\"outline\">\n      <mat-label>Anotacion</mat-label>\n      <input formControlName='anotacion' matInput>\n      <mat-error *ngIf=\"form.get('anotacion').hasError('required')\">\n        <strong>Este campo es obligatorio</strong>\n      </mat-error>\n      <mat-error *ngIf=\"form.get('anotacion').hasError('pattern')\">\n        <strong>los caracteres especiales no estan permitidos</strong>\n      </mat-error>\n    </mat-form-field>\n  <br>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Inicio</mat-label>\n    <input  matInput type=\"datetime-local\"  formControlName='inicio'>\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Terminación</mat-label>\n    <input  matInput type=\"datetime-local\"  formControlName='termino'>\n  </mat-form-field>\n  <br>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Registro</mat-label>\n    <input  matInput type=\"datetime-local\"  formControlName='registro'>\n  </mat-form-field>\n  <br>  \n  <div>\n    <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n      <mat-icon>send</mat-icon>enviar\n  </button>\n  <a color=\"warn\" (click)=\"volver()\" mat-raised-button>\n      <mat-icon>cancelar</mat-icon>cancelar\n  </a>\n  </div>\n</form>\n</mat-card>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport {MatPaginator} from '@angular/material/paginator';\nimport { Location } from '@angular/common';\n\n\n@Component({\n  selector: 'app-listar-actuaciones',\n  templateUrl: './listar-actuaciones.component.html',\n  styleUrls: ['./listar-actuaciones.component.css']\n})\nexport class ListarActuacionesComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  actuaciones : any;\n  proceso: number;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  displayedColumns: string[] = ['actuacion', 'registro', 'acciones'];\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService, public dialog: MatDialog, private _snackBar: MatSnackBar,private location: Location){ }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.listarActuaciones(event)\n    );\n  }\n\n\n  listadoInicial(){\n    this.proceso = +this.route.snapshot.paramMap.get('proceso')\n    this.procesoService.iniciarListadoActuaciones(this.proceso).subscribe(data => {\n      this.actuaciones = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n\n  listarActuaciones(event:any):void {\n    if (event.pageIndex === this.pageIndex+1) {\n      this.procesoService.obtenerNotificaciones(this.next).subscribe(data =>{\n        this.actuaciones = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(this.actuaciones)\n      })\n      this.pageIndex++\n    } else {\n      this.procesoService.obtenerNotificaciones(this.previous).subscribe(data =>{\n        this.actuaciones = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n    })\n    this.pageIndex--\n   }\n  }\n  \n  private openSnackBar(mensaje, accion):void {\n    this._snackBar.open(mensaje, accion, {\n      duration: 5000,\n    });\n  }\n\n  confirmDialog(registro:any): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar el registro de ${registro.id}`}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarActuacion(registro.id).subscribe(result => {\n          this.listadoInicial()\n          this.openSnackBar(\"registro eliminado\", \"☠️\")\n        })\n      }\n    });\n  }\n  \n  volver(): void{\n    this.location.back()\n  }\n\n}\n","<mat-card>   \n    <mat-card-title >\n      <mat-toolbar>\n        <span class=\"titulo\">Actuaciones</span>\n      </mat-toolbar>\n    </mat-card-title>\n    <mat-card-content>\n        <table mat-table [dataSource]=\"actuaciones\" class=\"mat-elevation-z8\">\n            \n            <ng-container matColumnDef=\"actuacion\">\n                <th mat-header-cell *matHeaderCellDef>Actuacion</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.actuacion}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"registro\">\n                <th mat-header-cell *matHeaderCellDef>Registro</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.registro}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"acciones\">\n                <th mat-header-cell *matHeaderCellDef>\n                  <a mat-icon-button color=\"accent\" (click)=\"volver()\" >\n                    <mat-icon>reply</mat-icon>\n                  </a>\n                  <a routerLink=\"/dashboard/proceso/agregar-actuacion/crear/{{proceso}}\"  mat-icon-button color=\"primary\">\n                    <mat-icon hr>person_add</mat-icon>\n                  </a>\n                </th>\n                <td mat-cell *matCellDef=\"let element\">  \n                  <button  mat-icon-button color=\"warn\" (click)=\"confirmDialog(element)\">\n                    <mat-icon>delete_forever</mat-icon>\n                  </button>\n                  <a routerLink=\"/dashboard/proceso/mostrar-actuacion/{{element.id}}\" mat-icon-button color=\"primary\">\n                    <mat-icon>face</mat-icon>\n                  </a>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator  [length]=\"count\" [pageSize]=\"5\"></mat-paginator>\n    </mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { Location } from '@angular/common';\nimport { MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-mostrar-actuacion',\n  templateUrl: './mostrar-actuacion.component.html',\n  styleUrls: ['./mostrar-actuacion.component.css']\n})\nexport class MostrarActuacionComponent implements OnInit {\n  id: number;\n  actuacion: any;\n  constructor(private location: Location, private route: ActivatedRoute, private procesoService: ProcesoService,public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.mostrarActuacion()\n  }\n\n  mostrarActuacion(): void {\n    this.id=+ this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarActuacion(this.id).subscribe(data => {\n      this.actuacion = data\n      console.log(data)\n    })\n  }\n\n  volver(): void{\n    this.location.back()\n  }\n\n\n  confirmDialog(): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar este registro`}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarActuacion(this.actuacion.id).subscribe(result => {\n          this.volver() \n        })\n      }\n    });\n  }\n\n\n}\n","<mat-card>\n    <mat-card-title>\n        <mat-toolbar>\n            <span class=\"titulo\">Actuación</span>\n        </mat-toolbar>\n    </mat-card-title> \n    <mat-card-content>\n       <table>\n           <tr>\n               <td><strong>Actuacion : </strong> </td>\n               <td>{{actuacion.actuacion}}</td>\n           </tr>\n           <tr>\n                <td><strong>Anotación : </strong> </td>\n                <td>{{actuacion.anotacion}}</td>\n            </tr>\n            <tr>\n                <td><strong>Inicio : </strong> </td>\n                <td>{{actuacion.inicio}}</td>\n            </tr>\n            <tr>\n                <td><strong>Termino : </strong> </td>\n                <td>{{actuacion.termino}}</td>\n            </tr>\n            <tr>\n                <td><strong>Registro : </strong> </td>\n                <td>{{actuacion.registro}}</td>\n            </tr>\n            <tr>\n                <td style=\"text-align:center\" colspan=\"2\">\n                    <button mat-icon-button color=\"accent\" (click)=\"volver()\" >\n                        <mat-icon>reply</mat-icon>\n                    </button>\n                    <button mat-icon-button color=\"primary\" routerLink=\"/dashboard/proceso/actualizar-actuacion/actualizar/{{actuacion.id}}\">\n                      <mat-icon>create</mat-icon>\n                    </button>\n                    <button mat-icon-button color=\"warn\"  (click)=\"confirmDialog()\">\n                      <mat-icon>delete_forever</mat-icon>\n                    </button>\n                </td>\n            </tr>\n       </table>   \n    </mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-archivo',\n  templateUrl: './agregar-archivo.component.html',\n  styleUrls: ['./agregar-archivo.component.css']\n})\nexport class AgregarArchivoComponent implements OnInit {\n  private accion: string;\n  archivo : any;\n  id : number;\n  private proceso : string;\n  form = new FormGroup({\n    nombre_archivo: new FormControl(),\n    archivo :  new FormControl(),\n    descripcion : new FormControl(),\n  })\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    if(this.accion === 'actualizar'){\n      //this.inicializar()\n      console.log('actualizando')\n    }else{\n      this.proceso = this.route.snapshot.paramMap.get('proceso')\n    }\n  }\n\n  procesarArchivo(event):void {\n    if (event.target.files.length > 0) {\n      const archivo = event.target.files[0];\n      this.form.patchValue({\n        archivo: archivo\n      });\n    }\n  }\n\n  private obtener_extension(archivo:string){\n    let extension = archivo.split(\".\")\n    console.log(extension[extension.length-1])\n    return extension[-1]\n  }\n  volver(): void{\n    this.location.back()\n  }\n\n\n  registrar(){\n    const formData = new FormData();\n    formData.append('proceso', this.proceso);\n    let archivo = this.obtener_extension(this.form.get('nombre_archivo').value)\n    formData.append('archivo', this.form.get('archivo').value);\n    formData.append('descripcion', this.form.get('descripcion').value);\n    this.procesoService.agregarArchivo(formData).subscribe( data => \n      this.volver()\n    )\n    \n  }\n}\n","<mat-card>\n    <form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate> \n        <div>\n            <span class=\"titulo\">Agregar archivo</span>\n          </div><br>\n        <input type=\"file\" formControlName='nombre_archivo'  id=\"input\" (change)=\"procesarArchivo($event)\">\n        <label for=\"input\" id=\"label\"><a  color=\"primary\" mat-raised-button><mat-icon>arrow_circle_up</mat-icon>elige un archivo</a></label>\n        <br>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Descripcion</mat-label>\n            <input formControlName='descripcion' matInput>\n        </mat-form-field><br>\n        <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n            <mat-icon>send</mat-icon>enviar\n        </button>\n        <a color=\"warn\" routerLink=\"/dashboard/abogado/listar-personas\" (click)=\"volver()\" mat-raised-button>\n            <mat-icon>cancelar</mat-icon>cancelar\n        </a>\n    </form>\n    \n</mat-card>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { ActivatedRoute } from '@angular/router';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { MatDialog} from '@angular/material/dialog';\nimport { Location } from '@angular/common';\n\n\n@Component({\n  selector: 'app-listar-archivos',\n  templateUrl: './listar-archivos.component.html',\n  styleUrls: ['./listar-archivos.component.css']\n})\nexport class ListarArchivosComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  proceso: number;\n  archivos: any;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  nombre : string;\n  displayedColumns: string[] = ['archivo', 'descripcion', 'acciones'];\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService, public dialog: MatDialog, private _snackBar: MatSnackBar,private location: Location) { }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.listarArchivos(event)\n    );\n  }\n\n  listadoInicial(){\n    this.proceso = +this.route.snapshot.paramMap.get('proceso')\n    this.procesoService.iniciarListadoArchivos(this.proceso).subscribe(data => {\n      this.archivos = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n  volver(): void{\n    this.location.back()\n  }\n\n  listarArchivos(event:any):void {\n    if (event.pageIndex === this.pageIndex+1) {\n      this.procesoService.obtenerArchivos(this.next).subscribe(data =>{\n        this.archivos = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(this.archivos)\n      })\n      this.pageIndex++\n    } else {\n      this.procesoService.obtenerNotificaciones(this.previous).subscribe(data =>{\n        this.archivos = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n    })\n    this.pageIndex--\n   }\n  }\n  \n  private openSnackBar(mensaje, accion):void {\n    this._snackBar.open(mensaje, accion, {\n      duration: 5000,\n    });\n  }\n\n  confirmDialog(registro:any): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar el registro de ${registro.id}`}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarArchivo(registro.id).subscribe(result => {\n          this.listadoInicial()\n          this.openSnackBar(\"registro eliminado\", \"☠️\")\n        })\n      }\n    });\n  }\n  \n  obtenerNombre(): void{\n    let palabras = this.archivos.archivo\n    let indice = palabras.length()\n    this.nombre = palabras[indice-1]\n  }\n}\n","<mat-card>   \r\n    <mat-card-title >\r\n      <mat-toolbar>\r\n        <span class=\"titulo\">Archivos</span>\r\n      </mat-toolbar>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <table mat-table [dataSource]=\"archivos\" class=\"mat-elevation-z8\">\r\n            \r\n            <ng-container matColumnDef=\"archivo\">\r\n                <th mat-header-cell *matHeaderCellDef>Archivo</th>\r\n                <td mat-cell *matCellDef=\"let element\"> <a href=\"{{element.archivo}}\">{{element.archivo | archivoNombre}}</a> </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"descripcion\">\r\n                <th mat-header-cell *matHeaderCellDef>Descripcion</th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.descripcion}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"acciones\">\r\n                <th mat-header-cell *matHeaderCellDef>\r\n                  <button mat-icon-button color=\"accent\" (click)=\"volver()\" >\r\n                    <mat-icon>reply</mat-icon>\r\n                  </button>\r\n                  <a routerLink=\"/dashboard/proceso/agregar-archivo/crear/{{proceso}}\"  mat-icon-button color=\"primary\" download=\"archivo\">\r\n                    <mat-icon hr>person_add</mat-icon>\r\n                  </a>\r\n                </th>\r\n                <td mat-cell *matCellDef=\"let element\">  \r\n                  <button  mat-icon-button color=\"warn\" (click)=\"confirmDialog(element)\">\r\n                    <mat-icon>delete_forever</mat-icon>\r\n                  </button>\r\n                </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator  [length]=\"count\" [pageSize]=\"5\"></mat-paginator>\r\n    </mat-card-content>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-cautelar',\n  templateUrl: './agregar-cautelar.component.html',\n  styleUrls: ['./agregar-cautelar.component.css']\n})\nexport class AgregarCautelarComponent implements OnInit {\n  private accion: string;\n  cautelar : any;\n  id : number;\n  private proceso : number;\n  form = new FormGroup({\n    proceso : new FormControl(),\n    clase : new FormControl('', [\n      Validators.required\n    ]),\n    estado : new FormControl('',[\n      Validators.required\n    ]),\n    secuestro_info : new FormControl('',[\n      Validators.required\n    ])\n\n  })\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    this.form.controls['proceso'].setValue(this.proceso)\n    if(this.accion === 'actualizar'){\n      this.inicializar()\n      console.log('actualizando')\n    }else{\n      this.proceso =+ this.route.snapshot.paramMap.get('proceso')\n      this.form.controls['proceso'].setValue(this.proceso)\n    }\n  }\n  private inicializar(){\n    this.id =+  this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarCautelar(this.id).subscribe(data => {\n      this.form.controls['proceso'].setValue(data['proceso'])\n      this.form.controls['clase'].setValue(data['clase'])\n      this.form.controls['estado'].setValue(data['estado'])\n      this.form.controls['secuestro_info'].setValue(data['secuestro_info'])\n    })\n  }\n  volver(): void{\n    this.location.back()\n  }\n\n  registrar():void{\n    if (this.accion === 'actualizar') {\n      this.procesoService.actualizarCautelar(this.form.value, this.id).subscribe(data => this.volver())\n    } else {\n      this.procesoService.agregarCautelar(this.form.value).subscribe(data => this.volver())\n    }\n  }\n\n}\n","<mat-card>\n  <form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n    <div>\n      <span class=\"titulo\">Agregar Cautelar</span>\n    </div>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Clase</mat-label>\n      <select matNativeControl formControlName=\"clase\" required>\n        <option value=\"REALES\">Reales</option>\n        <option value=\"BANCARIAS\">Bancarias</option>\n        <option value=\"DINEARIAS\">Dinearias</option>\n        <option value=\"DOCUMENTALES\">Documentales</option>\n      </select>\n      <mat-error *ngIf=\"form.get('clase').hasError('required')\">\n        <strong>Este campo es obligatorio</strong>\n      </mat-error>\n    </mat-form-field>\n    <br>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>estado</mat-label>\n        <select matNativeControl formControlName=\"estado\" required>\n            <option value=\"ORDENACION\">Ordenacion</option>\n            <option value=\"CONSTITUCION\">Constitucion</option>\n            <option value=\"CLASIFICACION\">Clacificacion</option>\n            <option value=\"CANCELACION\">Cancelacion</option>\n            <option value=\"ACEPTADO\">Aceptado</option>\n          </select>\n        <mat-error *ngIf=\"form.get('estado').hasError('required')\">\n          <strong>Este campo es obligatorio</strong>\n        </mat-error>\n      </mat-form-field>\n    <br>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>secuestro_info</mat-label>\n        <input formControlName='secuestro_info' matInput>\n        <mat-error *ngIf=\"form.get('secuestro_info').hasError('required')\">\n          <strong>Este campo es obligatorio</strong>\n        </mat-error>\n      </mat-form-field>\n    <br>\n    <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n        <mat-icon>send</mat-icon>enviar\n    </button>\n    <a color=\"warn\" (click)=\"volver()\" mat-raised-button>\n        <mat-icon>cancelar</mat-icon>cancelar\n    </a>\n  </form>\n</mat-card>\n  \n<!--http://localhost:4200/dashboard/proceso/actualizar-cautelar/agregar/7-->","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { ActivatedRoute } from '@angular/router';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { MatDialog} from '@angular/material/dialog';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-listar-cautelar',\n  templateUrl: './listar-cautelar.component.html',\n  styleUrls: ['./listar-cautelar.component.css']\n})\nexport class ListarCautelarComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  cautelares : any;\n  proceso: number;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  nombre : string;\n  displayedColumns: string[] = ['clase', 'acciones'];\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService, public dialog: MatDialog, private _snackBar: MatSnackBar, private location: Location) { }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.listarCautelares(event)\n    );\n  }\n  listadoInicial(){\n    this.proceso = +this.route.snapshot.paramMap.get('proceso')\n    this.procesoService.iniciarListadoCautelares(this.proceso).subscribe(data => {\n      this.cautelares = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n\n  listarCautelares(event:any):void {\n    if (event.pageIndex === this.pageIndex+1) {\n      this.procesoService.obtenerArchivos(this.next).subscribe(data =>{\n        this.cautelares = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(this.cautelares)\n      })\n      this.pageIndex++\n    } else {\n      this.procesoService.obtenerNotificaciones(this.previous).subscribe(data =>{\n        this.cautelares = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n    })\n    this.pageIndex--\n   }\n  }\n  \n  volver(): void{\n    this.location.back()\n  }\n\n  private openSnackBar(mensaje, accion):void {\n    this._snackBar.open(mensaje, accion, {\n      duration: 5000,\n    });\n  }\n\n  confirmDialog(registro:any): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar el registro de ${registro.id}`}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarCautelar(registro.id).subscribe(result => {\n          this.listadoInicial()\n          this.openSnackBar(\"registro eliminado\", \"☠️\")\n        })\n      }\n    });\n  }\n\n}\n","<mat-card color=\"primary\">   \n    <mat-card-title >\n      <mat-toolbar>\n        <span class=\"titulo\">Medidas cautelares</span>\n      </mat-toolbar>\n    </mat-card-title>\n    <mat-card-content>\n        <table mat-table [dataSource]=\"cautelares\" class=\"mat-elevation-z8\">\n            \n            <ng-container matColumnDef=\"clase\">\n                <th mat-header-cell *matHeaderCellDef>Clase</th>\n                <td mat-cell *matCellDef=\"let element\">{{element.clase}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"acciones\">\n                <th mat-header-cell *matHeaderCellDef>\n                  <a mat-icon-button color=\"accent\" (click)=\"volver()\" >\n                    <mat-icon>reply</mat-icon>\n                  </a>\n                  <a routerLink=\"/dashboard/proceso/agregar-cautelar/crear/{{proceso}}\"  mat-icon-button color=\"primary\">\n                    <mat-icon hr>person_add</mat-icon>\n                  </a>\n                </th>\n                <td mat-cell *matCellDef=\"let element\">  \n                    <a routerLink=\"/dashboard/proceso/mostrar-cautelar/{{element.id}}\" mat-icon-button color=\"accent\">\n                        <mat-icon>face</mat-icon>\n                    </a>\n                    <button  mat-icon-button color=\"warn\" (click)=\"confirmDialog(element)\">\n                        <mat-icon>delete_forever</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator  [length]=\"count\" [pageSize]=\"5\"></mat-paginator>\n    </mat-card-content>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { MatDialog} from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-mostrar-cautelar',\n  templateUrl: './mostrar-cautelar.component.html',\n  styleUrls: ['./mostrar-cautelar.component.css']\n})\nexport class MostrarCautelarComponent implements OnInit {\n  id: number;\n  cautelar: any;\n  constructor(private location: Location, private route: ActivatedRoute, private procesoService: ProcesoService,public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.mostrarCautelar()\n  }\n\n  mostrarCautelar(): void {\n    this.id=+ this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarCautelar(this.id).subscribe(data => {\n      this.cautelar = data\n      console.log(data)\n    })\n  }\n\n  volver(): void{\n    this.location.back()\n  }\n\n\n  confirmDialog(): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar este registro`}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarCautelar(this.cautelar.id).subscribe(result => {\n          this.volver() \n        })\n      }\n    });\n  }\n\n\n}\n","<mat-card>\n    <mat-card-title>\n        <mat-toolbar>\n            <span class=\"titulo\">Cautelar</span>\n        </mat-toolbar>\n    </mat-card-title> \n    <mat-card-content>\n       <table>\n           <tbody>\n                <tr>\n                    <td><strong>Clase  </strong> </td>\n                    <td>{{cautelar.clase}}</td>\n                </tr>\n                <tr>\n                    <td><strong>Estado  </strong> </td>\n                    <td>{{cautelar.estado}}</td>\n                </tr>\n                <tr>\n                    <td><strong>Información  </strong> </td>\n                    <td>{{cautelar.secuestro_info}}</td>\n                </tr>\n                <tr>\n                    <td style=\"text-align:center\" colspan=\"2\">\n                        <button mat-icon-button color=\"accent\" (click)=\"volver()\" >\n                            <mat-icon>reply</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"primary\" routerLink=\"/dashboard/proceso/actualizar-cautelar/actualizar/{{cautelar.id}}\">\n                            <mat-icon>create</mat-icon>\n                        </button>\n                        <button mat-icon-button color=\"warn\"  (click)=\"confirmDialog()\">\n                            <mat-icon>delete_forever</mat-icon>\n                        </button>\n                    </td>\n                </tr>\n           </tbody>\n           \n       </table>   \n    </mat-card-content>\n</mat-card>","import { Component, OnInit, Input } from '@angular/core';\nimport { ProcesoService } from \"../../servicios/proceso.service\";\n\n\n@Component({\n  selector: 'app-despacho',\n  templateUrl: './despacho.component.html',\n  styleUrls: ['./despacho.component.css']\n})\nexport class DespachoComponent implements OnInit {\n  @Input() id: any;\n  public despacho: any;\n\n  constructor(private procesoService : ProcesoService) { }\n\n  ngOnInit(): void {\n    this.mostrarDespacho(this.id)\n  }\n  private mostrarDespacho(id:number){\n    this.procesoService.obtenerDespacho(id).subscribe(data => {this.despacho =data})\n  }\n\n}\n","<mat-card>\n        <table style=\"margin: 0 auto;\">\n            <caption>Despacho</caption>\n            <tbody>\n                <tr>\n                    <td >Departamento:</td>\n                    <td class=\"rigth\">{{despacho.departamento}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td >Ciudad:</td>\n                    <td class=\"rigth\">{{despacho.ciudad}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td >Corporación:</td>\n                    <td class=\"rigth\">{{despacho.corporacion}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td>Especialidad:</td>\n                    <td>{{despacho.especialidad}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td>Despacho:</td>\n                    <td >{{despacho.despacho}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td>Direccción:</td>\n                    <td>{{despacho.direccion}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td >Telefono:</td>\n                    <td>{{despacho.telefono}}</td>\n                </tr>\n                <mat-divider></mat-divider>\n                <tr>\n                    <td >Juez:</td>\n                    <td>{{despacho.juez.nombre}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </mat-card>","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-ejecutivo',\n  templateUrl: './agregar-ejecutivo.component.html',\n  styleUrls: ['./agregar-ejecutivo.component.css']\n})\nexport class AgregarEjecutivoComponent implements OnInit {\n  private accion: string;\n  private proceso: number;\n  private id: number;\n  form = new FormGroup({\n    proceso : new FormControl(),\n    titulo : new FormControl('', [\n      Validators.required\n    ]),\n    obligacion : new FormControl('', [\n      Validators.required\n    ]),\n    clase : new FormControl('', [\n      Validators.required\n    ]),\n    pretension : new FormControl('', [\n      Validators.pattern('^[0-9]*$'),\n      Validators.required\n    ]),\n    cuantia : new FormControl('', [\n      Validators.required\n    ])\n  })\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.proceso = +this.route.snapshot.paramMap.get('proceso')\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    this.form.controls['proceso'].setValue(this.proceso)\n    if(this.accion === 'actualizar'){\n      this.inicializar()\n      console.log('actualizando')\n    }\n    console.log(this.form.value)\n  }\n  volver(): void{\n    this.location.back()\n  }\n\n  public registrar():void {\n    if (this.accion === 'actualizar') {\n      this.procesoService.actualizarEjecutivo(this.id, this.form.value).subscribe(data => console.log(data))\n      console.log(this.form.value)\n      console.log(this.id)\n    }else{\n      this.procesoService.agregarEjecutivo(this.form.value).subscribe(data => console.log(data))\n    }\n    this.location.back()\n  }\n  private inicializar():void{\n    \n    this.procesoService.obtenerEjecutivo(this.proceso).subscribe(data => {\n      this.form.controls['proceso'].setValue(data['proceso'])\n      this.form.controls['titulo'].setValue(data['titulo'])\n      this.form.controls['obligacion'].setValue(data['obligacion'])\n      this.form.controls['clase'].setValue(data['clase'])\n      this.form.controls['pretension'].setValue(data['pretension'])\n      this.form.controls['cuantia'].setValue(data['cuantia'])\n      this.id = data['id']\n    })\n  }\n}\n","<mat-card>\n  <form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Titulo</mat-label>\n        <select matNativeControl formControlName=\"titulo\" required>\n          <option value=\"VALOR\">Valor</option>\n          <option value=\"EJECUTIVO\">Ejecutivo</option>\n        </select>\n        <mat-error *ngIf=\"form.get('titulo').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Obligacion</mat-label>\n        <select matNativeControl formControlName=\"obligacion\" required>\n          <option value=\"DAR\">Dar</option>\n          <option value=\"HACER\">Hacer</option>\n          <option value=\"NO_HACER\">No hacer</option>\n        </select>\n        <mat-error *ngIf=\"form.get('obligacion').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Clase</mat-label>\n        <select matNativeControl formControlName=\"clase\" required>\n          <option value=\"SINGULAR\">Singular</option>\n          <option value=\"HIPOTECARIO\">Hipotecario</option>\n          <option value=\"MIXTO\">Mixto</option>\n        </select>\n        <mat-error *ngIf=\"form.get('clase').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Pretension</mat-label>\n        <input formControlName='pretension' matInput>\n        <mat-error *ngIf=\"form.get('pretension').hasError('pattern')\">\n          <strong>Solo numeros</strong>\n        </mat-error>\n        <mat-error *ngIf=\"form.get('pretension').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Cunatia</mat-label>\n        <select matNativeControl formControlName=\"cuantia\" required>\n          <option value=\"minima\">minima</option>\n          <option value=\"menor\">menor</option>\n          <option value=\"mayor\">mayor</option>\n        </select>\n        <mat-error *ngIf=\"form.get('cuantia').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n      </mat-form-field>\n      <br>\n      <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n        <mat-icon>send</mat-icon>enviar\n      </button>\n      <a color=\"warn\" (click)=\"volver()\"  mat-raised-button>\n        <mat-icon>cancelar</mat-icon>cancelar\n      </a>\n</form>\n\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-notificacion',\n  templateUrl: './agregar-notificacion.component.html',\n  styleUrls: ['./agregar-notificacion.component.css']\n})\nexport class AgregarNotificacionComponent implements OnInit {\n  private accion: string;\n  notificacion : any;\n  id : number;\n  private proceso : number;\n  form = new FormGroup({\n    proceso: new FormControl(),\n    tipo: new FormControl('', [\n      Validators.required,\n    ]),\n    mensaje: new FormControl('', [\n      Validators.required,\n    ]),\n    expedicion: new FormControl('', [\n      Validators.required,\n    ]),\n    limite: new FormControl('', [\n      Validators.required,\n    ])    \n  })\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    this.form.controls['proceso'].setValue(this.proceso)\n    if(this.accion === 'actualizar'){\n      this.inicializar()\n      console.log('actualizando')\n    }else{\n      this.proceso =+ this.route.snapshot.paramMap.get('proceso')\n      this.form.controls['proceso'].setValue(this.proceso)\n    }\n  }\n\n  private formatDate(date):any {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n  private inicializar(){\n    this.id =+  this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarNotificacion(this.id).subscribe(data => {\n      this.form.controls['proceso'].setValue(data['proceso'])\n      this.form.controls['tipo'].setValue(data['tipo'])\n      this.form.controls['mensaje'].setValue(data['mensaje'])\n      this.form.controls['expedicion'].setValue(data['expedicion'])\n      this.form.controls['limite'].setValue(data['limite'])\n    })\n  }\n  volver(): void{\n    this.location.back()\n  }\n  registrar():void{\n    let dataParse = this.formatDate(this.form.value.limite)\n    this.form.value.limite = dataParse\n    if (this.accion === 'actualizar') {\n      this.procesoService.actualizarNotificacion(this.form.value, this.id).subscribe(data => this.volver())\n    } else {\n      this.procesoService.agregarNotificacion(this.form.value).subscribe(data => this.volver())\n    }\n  }\n}\n","<mat-card>\n  <form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n    <div>\n      <span class=\"titulo\">Datos generales</span>\n    </div>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>tipo</mat-label>\n        <input formControlName='tipo' matInput>\n        <mat-error *ngIf=\"form.get('tipo').hasError('required')\">\n          <strong>Este campo es obligatorio</strong>\n        </mat-error>\n        <mat-error *ngIf=\"form.get('tipo').hasError('pattern')\">\n          <strong>los caracteres especiales no estan permitidos</strong>\n        </mat-error>\n    </mat-form-field>\n    <br>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>mensaje</mat-label>\n      <textarea formControlName='mensaje' matInput></textarea>\n      <mat-error *ngIf=\"form.get('mensaje').hasError('required')\">\n        <strong>Este campo es obligatorio</strong>\n      </mat-error>\n      <mat-error *ngIf=\"form.get('mensaje').hasError('pattern')\">\n        <strong>los caracteres especiales no estan permitidos</strong>\n      </mat-error>\n    </mat-form-field>\n    <br>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>expedición</mat-label>\n        <input  matInput type=\"datetime-local\"  formControlName='expedicion'>\n    </mat-form-field>\n    <br>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Limite</mat-label>\n        <input matInput  formControlName='limite' [matDatepicker]=\"myDatepicker\">\n        <mat-datepicker-toggle matSuffix [for]=\"myDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #myDatepicker></mat-datepicker>\n        <mat-error *ngIf=\"form.get('limite').hasError('required')\">\n          <strong>Este campo es obligatorio</strong>\n        </mat-error>\n    </mat-form-field>\n    <br>\n    <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n        <mat-icon>send</mat-icon>enviar\n    </button>\n    <a color=\"warn\" (click)=\"volver()\"  mat-raised-button>\n        <mat-icon>cancelar</mat-icon>cancelar\n    </a>\n  </form>\n\n</mat-card>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ProcesoService } from \"../../servicios/proceso.service\";\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-empresas-notificadas',\n  templateUrl: './empresas-notificadas.component.html',\n  styleUrls: ['./empresas-notificadas.component.css']\n})\nexport class EmpresasNotificadasComponent implements OnInit {\n  @Input() notificados:any;\n  @Input() notificacion:number;\n  @Output() recargar = new EventEmitter<void>();\n  empresas: any;\n  form = new FormGroup({\n    empresa: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    notificacion: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    notificado: new FormControl(false, [\n      Validators.required\n    ]),\n    medio: new FormControl('', [\n      Validators.required\n    ])\n  })\n  constructor(private procesoService : ProcesoService) { }\n\n  ngOnInit(): void {\n    this.onChanges()\n    this.form.controls['notificacion'].setValue(this.notificacion)\n  }\n  onChanges(): void {\n    this.inicializar()\n  }\n\n  private inicializar(){\n    this.form.get('empresa').valueChanges.subscribe(valor => {\n      this.listarEmpresas(valor)\n    })\n  }\n  private listarEmpresas(empresa: string) {\n    this.procesoService.listarPartesJuridicas(empresa).subscribe(data =>{\n      this.empresas = data\n      console.log(data)\n    })\n  }\n  public registrar():void{\n    this.procesoService.agregarEmpresaNotificada(this.form.value).subscribe(data =>{\n      console.log(data)\n    })\n    this.form.reset()\n    this.form.controls['notificacion'].setValue(this.notificacion)\n    this.recargar.emit()\n    this.inicializar()\n  }\n\n  eliminar(id:number):void{\n    this.procesoService.eliminarEmpresaNotificada(id).subscribe(data =>{\n      console.log(data)\n      this.recargar.emit()\n      this.inicializar() \n    })\n    \n  }\n\n}\n","<mat-card id=\"card\" >\n\t<mat-card-title style=\"text-align: center;\">\n\t\t<mat-toolbar>\n      <span class=\"titulo\">Empresas notificadas</span>\n    </mat-toolbar>\n\t</mat-card-title>\n\n\t<mat-card-content>\n\t\t<mat-accordion class=\"example-headers-align\" multi>\n\t\t<mat-expansion-panel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\t<mat-panel-title>\n\t\t\t\t  agregar empresa\n\t\t\t\t</mat-panel-title>\n\t\t\t\t<mat-panel-description>\n\t\t\t\t</mat-panel-description>\n\t\t\t</mat-expansion-panel-header>\n\t\t\t<form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n                <mat-form-field >\n                    <input type=\"text\"\n                           placeholder=\"Empresa\"\n                           aria-label=\"Number\"\n                           matInput\n                           formControlName='empresa'\n                           [matAutocomplete]=\"auto\">\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                      <mat-option *ngFor=\"let empresa of empresas\" [value]=\"empresa.id\">\n                        {{empresa.nombre}}\n                      </mat-option>\n                    </mat-autocomplete>\n                    <mat-error *ngIf=\"form.get('empresa').hasError('required')\">\n                        <strong>Este campo es obligatorio</strong>\n                    </mat-error>\n                </mat-form-field><br>\n                <mat-slide-toggle  formControlName=\"notificado\">¿Fue notificado?</mat-slide-toggle><br>\n                <mat-form-field>\n                    <mat-label>Rol</mat-label>\n                    <select matNativeControl formControlName='medio' required>\n                      <option value=\"PERSONAL\">Personal</option>\n                      <option value=\"EMAIL\">Email</option>\n                      <option value=\"TELEFONO\">Telefono</option>\n                    </select>\n                </mat-form-field>\n                <br>\n                <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n                    enviar<mat-icon>send</mat-icon>\n                </button>\n            </form>\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t\t<div  *ngFor=\"let notificado of notificados\" class=\"container-row\" style=\"text-align: center;\"> \n\t\t\t\t<div>{{ notificado.empresa.nombre }}</div>\n\t\t\t\t<div>{{notificado.notificado}}</div>\n\t\t\t\t<div><button  mat-icon-button color=\"warn\" (click)=\"eliminar(notificado.id)\">\n\t\t\t\t\t<mat-icon>delete_forever</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t</div>\n\t</mat-card-content>\n</mat-card>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { MatDialog} from '@angular/material/dialog';\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-listar-notificaciones',\n  templateUrl: './listar-notificaciones.component.html',\n  styleUrls: ['./listar-notificaciones.component.css']\n})\nexport class ListarNotificacionesComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  notificaciones: any;\n  proceso: number;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  displayedColumns: string[] = ['tipo', 'expedicion', 'limite', 'acciones'];\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService, public dialog: MatDialog, private _snackBar: MatSnackBar, private location: Location) { }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.obtenerListadoNotificaciones(event)\n    );\n  }\n\n  listadoInicial(){\n    this.proceso = +this.route.snapshot.paramMap.get('proceso')\n    this.procesoService.iniciarlistadoNotificaciones(this.proceso).subscribe(data => {\n      this.notificaciones = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n\n  public obtenerListadoNotificaciones(event:any):void {\n    if (event.pageIndex === this.pageIndex+1) {\n      this.procesoService.obtenerNotificaciones(this.next).subscribe(data =>{\n        this.notificaciones = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n      })\n      this.pageIndex++\n    } else {\n      this.procesoService.obtenerNotificaciones(this.previous).subscribe(data =>{\n        this.notificaciones = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n    })\n    this.pageIndex--\n   }\n  }\n\n  private openSnackBar(mensaje, accion):void {\n    this._snackBar.open(mensaje, accion, {\n      duration: 5000,\n    });\n  }\n\n  confirmDialog(registro:any): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar el registro del proceso ${registro.id} `}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarNotificacion(registro.id).subscribe(result => {\n          this.listadoInicial()\n          this.openSnackBar(\"registro eliminado\", \"☠️\")\n        })\n      }\n    });\n  }\n\n  volver(): void{\n    this.location.back()\n  }\n}\n","\n  <mat-card>\n   \n        <mat-card-title >\n          <mat-toolbar>\n            <span class=\"titulo\">Notificaciones</span>\n          </mat-toolbar>\n        </mat-card-title>\n\n    <mat-card-content>\n        <table mat-table [dataSource]=\"notificaciones\" class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"tipo\">\n                <th mat-header-cell *matHeaderCellDef> Tipo </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.tipo}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"expedicion\">\n                <th mat-header-cell *matHeaderCellDef> Expedicion </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.expedicion}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"limite\">\n                <th mat-header-cell *matHeaderCellDef> Limite </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.limite}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"acciones\">\n                <th mat-header-cell *matHeaderCellDef>\n                  <button mat-icon-button color=\"accent\" (click)=\"volver()\" >\n                    <mat-icon>reply</mat-icon>\n                  </button>\n                  <a routerLink=\"/dashboard/proceso/agregar-notificacion/crear/{{proceso}}\"  mat-icon-button color=\"primary\">\n                    <mat-icon hr>person_add</mat-icon>\n                  </a>\n                </th>\n                <td mat-cell *matCellDef=\"let element\">  \n                  <button  mat-icon-button color=\"warn\" (click)=\"confirmDialog(element)\">\n                    <mat-icon>delete_forever</mat-icon>\n                  </button>\n                  <a routerLink=\"/dashboard/proceso/mostrar-notificacion/{{element.id}}\" mat-icon-button color=\"primary\">\n                    <mat-icon>face</mat-icon>\n                  </a>\n                  <a routerLink=\"/dashboard/proceso/actualizar-notificacion/actualizar/{{element.id}}\" mat-icon-button color=\"accent\">\n                    <mat-icon>create</mat-icon>\n                  </a>\n                </td>\n              </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n        <mat-paginator  [length]=\"count\" [pageSize]=\"5\"></mat-paginator>\n\n    </mat-card-content>\n</mat-card>\n\n","import { Component, OnInit } from '@angular/core';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-mostrar-notificacion',\n  templateUrl: './mostrar-notificacion.component.html',\n  styleUrls: ['./mostrar-notificacion.component.css']\n})\nexport class MostrarNotificacionComponent implements OnInit {\n  id: number;\n  notificacion: any;\n  constructor(private procesoService : ProcesoService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.obtenerActuacion()\n  }\n\n\n  obtenerActuacion(): void {\n    this.id=+ this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarNotificacion(this.id).subscribe(data => {\n      this.notificacion = data\n      console.log(data)\n    })\n  }\n\n}\n","\n<mat-card>\n        <mat-card-title>\n            <mat-toolbar>\n                <span class=\"titulo\">Notificación</span>\n            </mat-toolbar>\n        </mat-card-title> \n    <mat-card-content>\n        <table>\n            <thead>\n                <th>tipo</th>\n                <th>mensaje</th>\n                <th>expedicion</th>\n                <th>limite</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td data-label=\"tipo\">{{notificacion.tipo}}</td>\n                    <td data-label=\"mensaje\">{{notificacion.mensaje}}</td>\n                    <td class=\"break\" lang=\"es\" data-label=\"expedicion\">{{notificacion.expedicion}}</td>\n                    <td data-label=\"notificacion\">{{notificacion.limite}}</td>\n                </tr>\n            </tbody>\n\n        </table>\n                \n    </mat-card-content>\n</mat-card>\n<div class=\"cards\">  \n    <app-personas-notificadas [notificados]=\"notificacion.personasNotificadas\" [notificacion]=\"notificacion.id\" (recargar)=\"obtenerActuacion()\"></app-personas-notificadas>\n    <app-empresas-notificadas [notificados]=\"notificacion.empresasNotificadas\" [notificacion]=\"notificacion.id\" (recargar)=\"obtenerActuacion()\"></app-empresas-notificadas>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ProcesoService } from \"../../servicios/proceso.service\";\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-personas-notificadas',\n  templateUrl: './personas-notificadas.component.html',\n  styleUrls: ['./personas-notificadas.component.css']\n})\nexport class PersonasNotificadasComponent implements OnInit {\n  @Input() notificados:any;\n  @Input() notificacion:number;\n  @Output() recargar = new EventEmitter<void>();\n  personas: any;\n  form = new FormGroup({\n    persona: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    notificacion: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    notificado: new FormControl(false, [\n      Validators.required\n    ]),\n    medio: new FormControl('', [\n      Validators.required\n    ])\n  })\n  constructor(private procesoService : ProcesoService) { }\n\n  ngOnInit(): void {\n    this.onChanges()\n    this.form.controls['notificacion'].setValue(this.notificacion)\n  }\n\n  onChanges(): void {\n    this.inicializar()\n  }\n  private inicializar(){\n    this.form.get('persona').valueChanges.subscribe(valor => {\n      this.listarPersonas(valor)\n    })\n  }\n\n  private listarPersonas(persona: string) {\n    this.procesoService.listarPartesNaturales(persona).subscribe(data =>{\n      this.personas = data\n      console.log(data)\n    })\n  }\n  public registrar():void{\n    this.procesoService.agregarPersonaNotificada(this.form.value).subscribe(data =>{\n      console.log(data)\n    })\n    this.form.reset()\n    this.form.controls['notificacion'].setValue(this.notificacion)\n    this.recargar.emit()\n    this.inicializar()\n  }\n\n  eliminar(id:number):void{\n    this.procesoService.eliminarPersonaNotificada(id).subscribe(data =>{\n      console.log(data)\n      this.recargar.emit()\n      this.inicializar()\n    })\n    \n  }\n}\n","<mat-card id=\"card\" >\n\t<mat-card-title style=\"text-align: center;\">\n\t\t<mat-toolbar>\n      <span class=\"titulo\">Personas notificadas</span>\n    </mat-toolbar>\n\t</mat-card-title>\n\n\t<mat-card-content>\n\t\t<mat-accordion class=\"example-headers-align\" multi>\n\t\t<mat-expansion-panel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\t<mat-panel-title>\n\t\t\t\t  agregar persona\n\t\t\t\t</mat-panel-title>\n\t\t\t\t<mat-panel-description>\n\t\t\t\t</mat-panel-description>\n\t\t\t</mat-expansion-panel-header>\n\t\t\t<form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n                <mat-form-field >\n                    <input type=\"text\"\n                           placeholder=\"Persona\"\n                           aria-label=\"Number\"\n                           matInput\n                           formControlName='persona'\n                           [matAutocomplete]=\"auto\">\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                      <mat-option *ngFor=\"let persona of personas\" [value]=\"persona.id\">\n                        {{persona.nombre}} {{persona.apellido}}\n                      </mat-option>\n                    </mat-autocomplete>\n                    <mat-error *ngIf=\"form.get('persona').hasError('required')\">\n                        <strong>Este campo es obligatorio</strong>\n                    </mat-error>\n                </mat-form-field><br>\n                <mat-slide-toggle  formControlName=\"notificado\">¿Fue notificado?</mat-slide-toggle><br>\n                <mat-form-field>\n                    <mat-label>Rol</mat-label>\n                    <select matNativeControl formControlName='medio' required>\n                      <option value=\"PERSONAL\">Personal</option>\n                      <option value=\"EMAIL\">Email</option>\n                      <option value=\"TELEFONO\">Telefono</option>\n                    </select>\n                </mat-form-field>\n                <br>\n                <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n                    enviar<mat-icon>send</mat-icon>\n                </button>\n            </form>\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t\t<div  *ngFor=\"let notificado of notificados\" class=\"container-row\" style=\"text-align: center;\"> \n\t\t\t\t<div>{{ notificado.persona.nombre }} {{ notificado.persona.apellido }} </div>\n\t\t\t\t<div>{{notificado.notificado}}</div>\n\t\t\t\t<div><button  mat-icon-button color=\"warn\" (click)=\"eliminar(notificado.id)\">\n\t\t\t\t\t<mat-icon>delete_forever</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t</div>\n\t</mat-card-content>\n</mat-card>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-partes-juridicas',\n  templateUrl: './partes-juridicas.component.html',\n  styleUrls: ['./partes-juridicas.component.css']\n})\nexport class PartesJuridicasComponent implements OnInit {\n  @Input() partes:any;\n  @Input() proceso:number;\n  @Output() recargar = new EventEmitter<void>();\n  form = new FormGroup({\n    empresa: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    rol: new FormControl('', [\n      Validators.required,\n    ]),\n    proceso: new FormControl()\n  })\n  empresas: any;\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.onChanges()\n    this.form.controls['proceso'].setValue(this.proceso)\n  }\n\n  onChanges(): void {\n    this.inicializar()\n  }\n  private inicializar(){\n    this.form.get('empresa').valueChanges.subscribe(valor => {\n      this.listarEmpresas(valor)\n    })\n  }\n  private listarEmpresas(empresa: string) {\n    this.procesoService.listarPartesJuridicas(empresa).subscribe(data =>{\n      this.empresas = data\n      console.log(data)\n    })\n  }\n\n  public registrar():void{\n    this.procesoService.agregarParteJuridica(this.form.value).subscribe(data =>{\n      console.log(data)\n      this.recargar.emit()\n    })\n    this.form.reset()\n    this.form.controls['proceso'].setValue(this.proceso)\n    this.inicializar()\n  }\n\n  eliminar(id:number):void{\n    this.procesoService.eliminarParteJuridica(id).subscribe(data =>{\n      console.log(data)\n      this.recargar.emit()\n    })\n    this.inicializar()\n  }\n\n}\n","<mat-card id=\"card\" >\n\t<mat-card-title style=\"text-align: center;\">\n\t\tPartes Juridicas\n\t</mat-card-title>\n\n\t<mat-card-content>\n\t\t<mat-accordion class=\"example-headers-align\" multi>\n\t\t<mat-expansion-panel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\t<mat-panel-title>\n\t\t\t\t  agregar empresa\n\t\t\t\t</mat-panel-title>\n\t\t\t\t<mat-panel-description>\n\t\t\t\t</mat-panel-description>\n\t\t\t</mat-expansion-panel-header>\n\t\t\t\t<form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n\t\t\t\t\t<mat-form-field >\n\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t   placeholder=\"Empresa\"\n\t\t\t\t\t\t\t   aria-label=\"Number\"\n\t\t\t\t\t\t\t   matInput\n\t\t\t\t\t\t\t   formControlName='empresa'\n\t\t\t\t\t\t\t   [matAutocomplete]=\"auto\">\n\t\t\t\t\t\t<mat-autocomplete #auto=\"matAutocomplete\">\n\t\t\t\t\t\t  <mat-option *ngFor=\"let empresa of empresas\" [value]=\"empresa.id\">\n\t\t\t\t\t\t\t{{empresa.nombre}} {{empresa.apellido}}\n\t\t\t\t\t\t  </mat-option>\n\t\t\t\t\t\t</mat-autocomplete>\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('empresa').hasError('required')\">\n\t\t\t\t\t\t\t<strong>Este campo es obligatorio</strong>\n\t\t\t\t\t\t</mat-error>\n\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t<mat-form-field>\n\t\t\t\t\t\t<mat-label>Rol</mat-label>\n\t\t\t\t\t\t<select matNativeControl formControlName='rol' required>\n\t\t\t\t\t\t  <option value=\"DEMANDADO\">Demandado</option>\n\t\t\t\t\t\t  <option value=\"DEMANDANTE\">Demandante</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('rol').hasError('required')\">\n\t\t\t\t\t\t\t<strong>Este campo es obligatorio</strong>\n\t\t\t\t\t\t  </mat-error>\n\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t<br>\n\t\t\t\t\t<button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n\t\t\t\t\t\tenviar<mat-icon>send</mat-icon>\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t<br>\n\t\t\t\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t\t<div  *ngFor=\"let parte of partes\" class=\"container-row\" style=\"text-align: center;\"> \n\t\t\t\t<div>{{ parte.empresa.nombre }}</div>\n\t\t\t\t<div>{{parte.rol}}</div>\n\t\t\t\t<div><button  mat-icon-button color=\"warn\" (click)=\"eliminar(parte.id)\">\n\t\t\t\t\t<mat-icon>delete_forever</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t</div>\n\t</mat-card-content>\n</mat-card>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\n\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\n\n\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-partes',\n  templateUrl: './partes.component.html',\n  styleUrls: ['./partes.component.css']\n})\nexport class PartesComponent implements OnInit {\n  @Input() partes:any;\n  @Input() proceso:number;\n  @Output() recargar = new EventEmitter<void>();\n  form = new FormGroup({\n    persona: new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    rol: new FormControl('', [\n      Validators.required,\n    ]),\n    proceso: new FormControl()\n  })\n  personas: any;\n  constructor(private procesoService : ProcesoService) { }\n\n  ngOnInit(): void {\n    this.onChanges()\n    this.form.controls['proceso'].setValue(this.proceso)\n  }\n\n  onChanges(): void {\n    this.inicializar()\n  }\n  private inicializar(){\n    this.form.get('persona').valueChanges.subscribe(valor => {\n      this.listarPersonas(valor)\n    })\n  }\n  private listarPersonas(persona: string) {\n    this.procesoService.listarPartesNaturales(persona).subscribe(data =>{\n      this.personas = data\n      console.log(data)\n    })\n  }\n\n  public registrar():void{\n    this.procesoService.agregarParteNatural(this.form.value).subscribe(data =>{\n      console.log(data)\n      this.inicializar()\n    })\n    this.form.reset()\n    this.recargar.emit()\n    this.form.controls['proceso'].setValue(this.proceso)\n\n  }\n\n  eliminar(id:number):void{\n    this.procesoService.eliminarParteNatural(id).subscribe(data =>{\n      console.log(data)\n      this.recargar.emit()\n      this.inicializar()\n    })\n    \n  }\n\n}\n","<mat-card id=\"card\" >\n\t<mat-card-title style=\"text-align: center;\">\n\t\tPartes Naturales\n\t</mat-card-title>\n\n\t<mat-card-content>\n\t\t<mat-accordion class=\"example-headers-align\" multi>\n\t\t<mat-expansion-panel>\n\t\t\t<mat-expansion-panel-header>\n\t\t\t\t<mat-panel-title>\n\t\t\t\t  agregar persona\n\t\t\t\t</mat-panel-title>\n\t\t\t\t<mat-panel-description>\n\t\t\t\t</mat-panel-description>\n\t\t\t</mat-expansion-panel-header>\n\t\t\t\t<form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n\t\t\t\t\t<mat-form-field >\n\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t   placeholder=\"Persona\"\n\t\t\t\t\t\t\t   aria-label=\"Number\"\n\t\t\t\t\t\t\t   matInput\n\t\t\t\t\t\t\t   formControlName='persona'\n\t\t\t\t\t\t\t   [matAutocomplete]=\"auto\">\n\t\t\t\t\t\t<mat-autocomplete #auto=\"matAutocomplete\">\n\t\t\t\t\t\t  <mat-option *ngFor=\"let persona of personas\" [value]=\"persona.id\">\n\t\t\t\t\t\t\t{{persona.nombre}} {{persona.apellido}}\n\t\t\t\t\t\t  </mat-option>\n\t\t\t\t\t\t</mat-autocomplete>\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('persona').hasError('required')\">\n\t\t\t\t\t\t\t<strong>Este campo es obligatorio</strong>\n\t\t\t\t\t\t</mat-error>\n\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t<mat-form-field>\n\t\t\t\t\t\t<mat-label>Rol</mat-label>\n\t\t\t\t\t\t<select matNativeControl formControlName='rol' required>\n\t\t\t\t\t\t  <option value=\"DEMANDADO\">Demandado</option>\n\t\t\t\t\t\t  <option value=\"DEMANDANTE\">Demandante</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('rol').hasError('required')\">\n\t\t\t\t\t\t\t<strong>Este campo es obligatorio</strong>\n\t\t\t\t\t\t  </mat-error>\n\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t<br>\n\t\t\t\t\t<button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n\t\t\t\t\t\tenviar<mat-icon>send</mat-icon>\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t<br>\n\t\t\t\n\t\t</mat-expansion-panel>\n\t</mat-accordion>\n\t\t<div  *ngFor=\"let parte of partes\" class=\"container-row\" style=\"text-align: center;\"> \n\t\t\t\t<div>{{ parte.persona.nombre }} {{ parte.persona.apellido }} </div>\n\t\t\t\t<div>{{parte.rol}}</div>\n\t\t\t\t<div><button  mat-icon-button color=\"warn\" (click)=\"eliminar(parte.id)\">\n\t\t\t\t\t<mat-icon>delete_forever</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t</div>\n\t</mat-card-content>\n</mat-card>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'archivoNombre'\n})\nexport class ArchivoNombrePipe implements PipeTransform {\n\n  transform(value: string, ...args: unknown[]): any {\n    let partes = value.split(\"/\")\n    let indice = partes.length\n    let resultado = partes[indice-1]\n    return resultado\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport { ErrorStateMatcher } from \"@angular/material/core\";\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ProcesoService } from \"../../servicios/proceso.service\";\nimport { Location } from '@angular/common';\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-agregar-proceso',\n  templateUrl: './agregar-proceso.component.html',\n  styleUrls: ['./agregar-proceso.component.scss']\n})\nexport class AgregarProcesoComponent implements OnInit {\n  private accion: string;\n  despachos: any;\n  id:number;\n  form = new FormGroup({\n    numero_proceso : new FormControl('', [\n      Validators.required,\n      Validators.pattern('^[0-9]+$')\n    ]),\n    despacho : new FormControl('', [\n      Validators.required\n    ]),\n    tipo : new FormControl('EJECUTIVO', [\n\n    ]),\n    estado : new FormControl('', [\n      Validators.required\n    ]),\n    litisconsorcio : new FormControl('', [\n      Validators.required\n    ]),\n    descripcion : new FormControl('', [\n      Validators.required\n    ]),\n    fecha_providencia : new FormControl('', [\n      Validators.required\n    ]),\n    fecha_publicacion : new FormControl('', [\n      Validators.required\n    ]),\n    fecha_finalizacion : new FormControl('',[\n      Validators.required\n    ]),\n    \n  })\n\n  constructor(private route: ActivatedRoute, private procesoService : ProcesoService,private location: Location) { }\n\n  ngOnInit(): void {\n    this.accion = this.route.snapshot.paramMap.get('accion')\n    if(this.accion === 'actualizar'){\n      this.inicializar()\n      console.log('actualizando')\n    }\n    this.onChanges();\n  }\n\n  onChanges(): void {\n    this.form.get('despacho').valueChanges.subscribe(valor => {\n      this.listarDespachos(valor)\n    })\n  }\n\n  private listarDespachos(despacho: string) {\n    this.procesoService.listarDespachos(despacho).subscribe(data =>{\n      this.despachos = data\n      console.log(data)\n    })\n  }\n\n\n  private formatDate(date):any {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\n  /**\n   * registrar\n   */\n  public registrar():void {\n    /*let dataParse = this.formatDate(this.form.value.fecha_providencia)\n    this.form.value.fecha_providencia = dataParse\n    dataParse = this.formatDate(this.form.value.fecha_publicacion)\n    this.form.value.fecha_publicacion = dataParse\n    dataParse = this.formatDate(this.form.value.fecha_finalizacion)\n    this.form.value.fecha_finalizacion = dataParse*/\n    if (this.accion === 'actualizar') {\n      this.procesoService.actualizarProceso(this.id, this.form.value).subscribe(proceso => this.location.back())\n    }else{\n      this.procesoService.agregarProcesos(this.form.value).subscribe(proceso => this.location.back())\n    }\n    \n  }\n\n  private inicializar():void{\n    this.id = +this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarProceso(this.id).subscribe(data => {\n      this.form.controls['numero_proceso'].setValue(data['numero_proceso'])\n      this.form.controls['despacho'].setValue(data['despacho'])\n      this.form.controls['tipo'].setValue(data['tipo'])\n      this.form.controls['estado'].setValue(data['estado'])\n      this.form.controls['litisconsorcio'].setValue(data['litisconsorcio'])\n      this.form.controls['descripcion'].setValue(data['descripcion'])\n      this.form.controls['fecha_providencia'].setValue(data['fecha_providencia'])\n      this.form.controls['fecha_publicacion'].setValue(data['fecha_publicacion'])\n      this.form.controls['fecha_finalizacion'].setValue(data['fecha_finalizacion'])\n    })\n  }\n}\n","<mat-card>\n\n    \n\n    <form [formGroup]=\"form\" (ngSubmit)=\"registrar()\" novalidate>\n      <mat-form-field appearance=\"outline\">\n          <mat-label>Numero de proceso</mat-label>\n          <input formControlName='numero_proceso' matInput>\n          <mat-error *ngIf=\"form.get('numero_proceso').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n          <mat-error *ngIf=\"form.get('numero_proceso').hasError('pattern')\">\n            <strong>Solo numeros</strong>\n          </mat-error>\n        </mat-form-field>\n  \n        <mat-form-field appearance=\"outline\">\n          <mat-label>tipo</mat-label>\n          <input formControlName='tipo' matInput>\n          <mat-error *ngIf=\"form.get('tipo').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n        </mat-form-field>\n        <br>\n        <mat-form-field id=\"despacho\" appearance=\"outline\">\n          <input type=\"text\"\n                placeholder=\"Despachos\"\n                aria-label=\"Number\"\n                matInput\n                formControlName = \"despacho\"\n                [matAutocomplete]=\"auto\">\n          <mat-autocomplete #auto=\"matAutocomplete\" >\n            <mat-option *ngFor=\"let option of despachos\"  [value]=\"option.id\" >\n              {{option.despacho}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field><br>\n  \n        \n        <mat-form-field appearance=\"outline\">\n          <mat-label>estado</mat-label>\n          <input formControlName='estado' matInput>\n          <mat-error *ngIf=\"form.get('estado').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n          <mat-error *ngIf=\"form.get('estado').hasError('required')\">\n            <strong>Solo numeros</strong>\n          </mat-error>\n        </mat-form-field>\n        \n        <mat-form-field appearance=\"outline\">\n          <mat-label>Litisconsorcio</mat-label>\n          <select matNativeControl formControlName=\"litisconsorcio\" required>\n            <option value=\"NECESARIO\">Necesario</option>\n            <option value=\"FACULTATIVO\">Facultativo</option>\n            <option value=\"CUASI-NECESARIO\">Cuasi necesario</option>\n            <option value=\"NO-APLICA\">NO aplica</option>\n          </select>\n          <mat-error *ngIf=\"form.get('descripcion').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n        </mat-form-field>\n        <br>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Descripcion</mat-label>\n            <input formControlName='descripcion' matInput>\n          <mat-error *ngIf=\"form.get('descripcion').hasError('required')\">\n            <strong>Este campo es obligatorio</strong>\n          </mat-error>\n        </mat-form-field>\n        \n        <mat-form-field appearance=\"outline\">\n          <mat-label>Providencia</mat-label>\n          <input matInput type=\"datetime-local\" name='fecha_providencia' formControlName='fecha_providencia'>\n        </mat-form-field>\n        <br>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Publicación</mat-label>\n          <input matInput type=\"datetime-local\"  formControlName='fecha_publicacion'>\n        </mat-form-field>\n        \n        <mat-form-field appearance=\"outline\">\n          <mat-label>Finalización</mat-label>\n          <input matInput type=\"datetime-local\"  formControlName='fecha_finalizacion'>\n        </mat-form-field>\n        <br>\n        <button type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\"  mat-raised-button>\n          <mat-icon>send</mat-icon>enviar\n        </button>\n        <a color=\"warn\" routerLink=\"/dashboard/proceso/listar-procesos\"  mat-raised-button>\n          <mat-icon>cancelar</mat-icon>cancelar\n        </a>\n  </form>\n\n</mat-card>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ConfirmDialogComponent } from \"../../../compartidos/confirm-dialog/confirm-dialog.component\";\nimport { MatDialog} from '@angular/material/dialog';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport { ProcesoService } from '../../servicios/proceso.service';\nimport {MatPaginator} from '@angular/material/paginator';\n\nexport interface Proceso{\n  id : number;\n  numero_proceso : string;\n  despacho : string;\n  user : number;\n  tipo : string;\n  estado : string;\n  listisconsorcio : string;\n  descripcion : string;\n  fecha_providencia : any;\n  fecha_publicacion : any;\n  fecha_finalizacion : any; \n}\n\n@Component({\n  selector: 'app-listar-procesos',\n  templateUrl: './listar-procesos.component.html',\n  styleUrls: ['./listar-procesos.component.scss']\n})\nexport class ListarProcesosComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  displayedColumns: string[] = ['proceso', 'estado', 'acciones'];\n  dataSource : any;\n  proceso : Proceso;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  numero_proceso = new FormGroup({\n    numero_proceso : new FormControl('', [\n      Validators.pattern('^[0-9]+$')\n    ]),\n  })\n  constructor(private procesoService : ProcesoService, public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.obtenerListadoProcesos(event)\n    );\n  }\n\n  listadoInicial(): void {\n    this.procesoService.iniciarListadoProcesos().subscribe(data =>{\n      this.proceso = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n\n  public obtenerListadoProcesos(event:any):void {\n    if (event.pageIndex === this.pageIndex+1) {\n      this.procesoService.obtenerProcesos(this.next).subscribe(data =>{\n        this.proceso = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n      })\n      this.pageIndex++\n    } else {\n      this.procesoService.obtenerProcesos(this.previous).subscribe(data =>{\n        this.proceso = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n    })\n    this.pageIndex--\n   }\n  }\n\n  confirmDialog(registro:any): void {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      data:{titulo:'alerta', mensaje:`estas seguro de querer eliminar el registro del proceso ${registro.numero_proceso} `}\n    })\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if(dialogResult){\n        this.procesoService.eliminarProceso(registro.id).subscribe(result => {\n          this.listadoInicial()\n        })\n      }\n    });\n  }\n\n  buscarNumero(){\n    this.paginator.pageIndex=0\n    if (this.numero_proceso.get('numero_proceso').value != \"\") {\n      this.procesoService.listarProcesosId(this.numero_proceso.get('numero_proceso').value).subscribe(data =>{\n        this.proceso = data['results'];\n        this.count = data['count'];\n        this.next = data['next'];\n        this.previous = data['previous'];\n        this.pageIndex = 0;\n        console.log(data)\n      })\n    } else {\n      this.listadoInicial()\n    }\n  }\n\n}\n","<mat-card>\n  <mat-card-title >\n    <mat-toolbar>\n      <span class=\"titulo\">Procesos</span>\n    </mat-toolbar>\n  </mat-card-title>\n  <mat-card-content>\n    <mat-toolbar>\n      <form [formGroup]=\"numero_proceso\" (ngSubmit)=\"buscarNumero()\" class=\"titulo\" novalidate>\n        <mat-form-field>\n        <mat-label>ID</mat-label>\n          <input formControlName='numero_proceso'   matInput>\n        </mat-form-field>\n      </form>\n    </mat-toolbar>\n    <table mat-table [dataSource]=\"proceso\" class=\"mat-elevation-z8\">\n\n      <!--- Note that these columns can be defined in any order.\n            The actual rendered columns are set as a property on the row definition\" -->\n    \n      <!-- id Column -->\n      <ng-container matColumnDef=\"proceso\">\n        <th mat-header-cell *matHeaderCellDef>ID</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.numero_proceso}} </td>\n      </ng-container>\n    \n      <!-- estado Column -->\n      <ng-container matColumnDef=\"estado\">\n        <th mat-header-cell *matHeaderCellDef> estado </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.estado}} </td>\n      </ng-container>\n    \n      <ng-container matColumnDef=\"acciones\">\n        <th mat-header-cell *matHeaderCellDef>\n          <a routerLink=\"/dashboard/proceso/agregar-proceso/crear\"  mat-icon-button color=\"accent\">\n            <mat-icon hr>person_add</mat-icon>\n          </a>\n        </th>\n        <td mat-cell *matCellDef=\"let element\">  \n          <button  mat-icon-button color=\"warn\" (click)=\"confirmDialog(element)\">\n            <mat-icon>delete_forever</mat-icon>\n          </button>\n          <a routerLink=\"/dashboard/proceso/mostrar-proceso/{{element.id}}\" mat-icon-button color=\"accent\">\n            <mat-icon>gavel</mat-icon>\n          </a>\n        </td>\n      </ng-container>\n    \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    \n      <mat-paginator  [length]=\"count\"\n                      [pageSize]=\"5\"\n      >\n      </mat-paginator>\n  </mat-card-content>\n  \n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProcesoService } from \"../../servicios/proceso.service\";\n\nexport interface Proceso{\n  id : number;\n  numero_proceso : string;\n  despacho : string;\n  user : number;\n  tipo : string;\n  estado : string;\n  listisconsorcio : string;\n  descripcion : string;\n  fecha_providencia : any;\n  fecha_publicacion : any;\n  fecha_finalizacion : any; \n}\n\n@Component({\n  selector: 'app-mostrar-proceso',\n  templateUrl: './mostrar-proceso.component.html',\n  styleUrls: ['./mostrar-proceso.component.scss']\n})\nexport class MostrarProcesoComponent implements OnInit {\n  displayedColumns: string[] = ['campo', 'valor'];\n  id: number;\n  alerta: any;\n  proceso: any;\n  archivos: any;\n  ejecutivo: any;\n  cautelares: any;\n  actuaciones: any;\n  tablaProceso: any;\n  notificaciones: any;\n  tablaEjecutivo: any;\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService) { }\n\n  ngOnInit(): void {\n    this.id = +this.route.snapshot.paramMap.get('id')\n    this.contarAlertas()\n    this.obtenerProceso()\n    this.contarArchivos()\n    this.contarCautelares()\n    this.obtenerEjecutivo()\n    this.contarActuaciones()\n    this.contarNotificaciones()\n  }\n\n  obtenerProceso(): void {\n    //const id = +this.route.snapshot.paramMap.get('id')\n    this.procesoService.mostrarProceso(this.id).subscribe(data => {\n      this.proceso = data;\n      this.tablaProceso = this.crearFilasTabla(data)\n      console.log(data)\n    })\n  }\n\n  obtenerEjecutivo(): void {  \n    this.procesoService.obtenerEjecutivo(this.id).subscribe(data => {\n      this.ejecutivo = data\n      this.tablaEjecutivo = this.crearFilasTablaJuridico(data)\n      console.log(this.ejecutivo)\n    })\n  }\n\n  contarActuaciones(): void {\n    this.procesoService.contarActuaciones(this.id).subscribe(data => {\n      this.actuaciones = data\n    })\n  }\n\n  contarNotificaciones(): void {\n    this.procesoService.contarNotificaciones(this.id).subscribe(data => {\n      this.notificaciones = data\n    })\n  }\n  contarAlertas(): void {\n    this.procesoService.alertaNotificaciones(this.id).subscribe(data => {\n      this.alerta = data\n    })\n  }\n  contarArchivos(): void {\n    this.procesoService.contarArchivos(this.id).subscribe(data => {\n      this.archivos = data\n    })\n  }\n  contarCautelares(): void {\n    this.procesoService.contarCautelares(this.id).subscribe(data => {\n      this.cautelares = data\n    })\n  }\n  crearFilasTabla(proceso:object): Object[]{\n    let arrayValores = Object.entries(proceso)\n    let arraySalida= []\n    arraySalida = arrayValores.map( function(elemento) {\n\n        return {\"campo\" : elemento[0], \"valor\" : elemento[1]}\n\n    } )\n    arraySalida = arraySalida.filter(function(elemento){\n      return elemento['campo'] !='numero_proceso' && elemento['campo'] != 'id' && elemento['campo'] !='partesNaturales' && elemento['campo'] !='partesJuridicas' && elemento['campo'] != 'despacho'\n    })\n    return arraySalida;\n  }\n\n  crearFilasTablaJuridico(juridico:object): Object[]{\n    let arrayValores = Object.entries(juridico)\n    let arraySalida= []\n    arraySalida = arrayValores.map( function(elemento) {\n\n        return {\"campo\" : elemento[0], \"valor\" : elemento[1]}\n\n    } )\n    arraySalida = arraySalida.filter(function(elemento){\n      return elemento['campo'] !='proceso' && elemento['campo'] != 'id' \n    })\n    return arraySalida;\n  }\n\n  \n\n}\n","<div class=\"container-flex\">\n  <div class=\"horizontal-bloque\">\n    <!--cards notificaciones-->\n    <mat-card class=\"links\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"'/static/assets/iconos/megafono.svg'\">\n        <mat-card-title>Notificaciones</mat-card-title>\n      </mat-card-header>  \n      <mat-card-actions class=\"botones\">\n        <a mat-mini-fab color=\"warn\" matBadge=\"{{alerta}}\" routerLink=\"/dashboard/proceso/listar-notificaciones/{{proceso.id}}\" matBadgeColor=\"warn\">📢❗</a>\n        <button mat-mini-fab matBadge=\"{{notificaciones}}\" routerLink=\"/dashboard/proceso/listar-notificaciones/{{proceso.id}}\">🔔</button>\n      </mat-card-actions>\n    </mat-card>\n    <!--cards notificaciones-->\n    <!--cards actuaciones-->\n    <mat-card class=\"links\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"'/static/assets/iconos/discussion.svg'\">\n        <mat-card-title>Actuaciones</mat-card-title>\n      </mat-card-header>  \n      <mat-card-actions class=\"botones\">\n        <button mat-mini-fab matBadge=\"{{actuaciones}}\" routerLink=\"/dashboard/proceso/listar-actuaciones/{{proceso.id}}\">📂</button>\n      </mat-card-actions>\n    </mat-card>\n    <!--cards actuaciones-->\n    <!--archivos-->\n    <mat-card class=\"links\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"'/static/assets/iconos/search.svg'\">\n        <mat-card-title>Archivos</mat-card-title>\n      </mat-card-header>  \n      <mat-card-actions class=\"botones\">\n        <button mat-mini-fab matBadge=\"{{archivos}}\"  routerLink=\"/dashboard/proceso/listar-archivos/{{proceso.id}}\">💾</button>\n      </mat-card-actions>\n    </mat-card>\n    <!--archivos-->\n    <!--cautelares-->\n    <mat-card class=\"links\">\n      <mat-card-header>\n        <img mat-card-avatar [src]=\"'/static/assets/iconos/ban.svg'\">\n        <mat-card-title>Cautelares</mat-card-title>\n      </mat-card-header>  \n      <mat-card-actions class=\"botones\">\n        <button mat-mini-fab color=\"warn\" matBadge=\"{{cautelares}}\"  matBadgeColor=\"warn\" routerLink=\"/dashboard/proceso/listar-cautelares/{{proceso.id}}\">🚧</button>\n      </mat-card-actions>\n    </mat-card>\n    <!--cautelares-->\n  </div>\n  \n  <!--cardsssssss-->\n  <div class=\"horizontal-bloque\">\n    <div class=\"cards\">\n      <mat-toolbar >\n        <span>{{ proceso.numero_proceso }}</span>\n        <span class=\"example-spacer\"></span>\n        <mat-card-subtitle><button color=\"primary\"  routerLink=\"/dashboard/proceso/actualizar-proceso/actualizar/{{proceso.id}}\" mat-button><mat-icon hr>create</mat-icon>Actualizar</button></mat-card-subtitle>\n      </mat-toolbar>\n      <table mat-table [dataSource]=\"tablaProceso\" >     \n      \n        <ng-container matColumnDef=\"campo\">\n          <th mat-header-cell *matHeaderCellDef>   </th>\n          <td mat-cell *matCellDef=\"let elemento\">{{elemento.campo}} : </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"valor\">\n          <th mat-header-cell *matHeaderCellDef> </th>\n          <td mat-cell *matCellDef=\"let elemento\">  {{elemento.valor}}</td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n    </div>\n     <!--cardsssssss-->\n     <div class=\"cards\">\n      <mat-toolbar >\n        <span>Juridico</span>\n        <span class=\"example-spacer\"></span>\n        <mat-card-subtitle><button *ngIf=\"ejecutivo.clase!=null\" color=\"primary\"  routerLink=\"/dashboard/proceso/actualizar-ejecutivo/actualizar/{{proceso.id}}\" mat-button><mat-icon hr>create</mat-icon>actualizar</button></mat-card-subtitle>\n        <mat-card-subtitle><button *ngIf=\"ejecutivo.clase==null\" color=\"primary\"  routerLink=\"/dashboard/proceso/agregar-ejecutivo/agregar/{{proceso.id}}\" mat-button><mat-icon hr>create</mat-icon>Agregar</button></mat-card-subtitle>\n      </mat-toolbar>\n      <table mat-table [dataSource]=\"tablaEjecutivo\" >     \n      \n        <ng-container matColumnDef=\"campo\">\n          <th mat-header-cell *matHeaderCellDef>   </th>\n          <td mat-cell *matCellDef=\"let elemento\">{{elemento.campo}} : </td>\n        </ng-container>\n  \n        <ng-container matColumnDef=\"valor\">\n          <th mat-header-cell *matHeaderCellDef> </th>\n          <td mat-cell *matCellDef=\"let elemento\">  {{elemento.valor}}</td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n    </div>\n  </div>\n  <!--cardsssssss-->   \n  <div class=\"horizontal-bloque\">\n    <!--partes naturales-->\n    <div class=\"cards\">  \n      <app-partes  [partes]=\"proceso.partesNaturales\" [proceso]=\"proceso.id\" (recargar)=\"obtenerProceso()\"></app-partes>\n    </div>\n    <!--partes juridicas-->\n    <div class=\"cards\">  \n      <app-partes-juridicas  [partes]=\"proceso.partesJuridicas\" [proceso]=\"proceso.id\" (recargar)=\"obtenerProceso()\"></app-partes-juridicas>\n    </div>\n   <!--despacho-->\n  </div>\n  <div class=\"despacho-bloque\">\n    <div class=\"cards\">\n      <app-despacho [id]='proceso.despacho'></app-despacho>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListarProcesosComponent } from \"./proceso/listar-procesos/listar-procesos.component\";\nimport { AgregarProcesoComponent } from \"./proceso/agregar-proceso/agregar-proceso.component\";\nimport { MostrarProcesoComponent } from \"./proceso/mostrar-proceso/mostrar-proceso.component\";\nimport { AgregarEjecutivoComponent } from \"./ejecutivo/agregar-ejecutivo/agregar-ejecutivo.component\";\nimport { AgregarActuacionComponent } from \"./actuaciones/agregar-actuacion/agregar-actuacion.component\";\nimport { ListarActuacionesComponent } from \"./actuaciones/listar-actuaciones/listar-actuaciones.component\";\nimport { AgregarCautelarComponent } from \"./calutelares/agregar-cautelar/agregar-cautelar.component\";\nimport { AgregarNotificacionComponent } from \"./notificaciones/agregar-notificacion/agregar-notificacion.component\";\nimport { AgregarArchivoComponent } from \"./archivos/agregar-archivo/agregar-archivo.component\";\nimport { MostrarNotificacionComponent } from './notificaciones/mostrar-notificacion/mostrar-notificacion.component';\nimport { ListarNotificacionesComponent } from './notificaciones/listar-notificaciones/listar-notificaciones.component';\nimport { MostrarActuacionComponent } from \"./actuaciones/mostrar-actuacion/mostrar-actuacion.component\";\nimport { ListarArchivosComponent } from \"./archivos/listar-archivos/listar-archivos.component\";\nimport { ListarCautelarComponent } from './calutelares/listar-cautelar/listar-cautelar.component';\nimport { MostrarCautelarComponent } from './calutelares/mostrar-cautelar/mostrar-cautelar.component';\nimport { TodasMisNotificacionesComponent } from \"./todas-mis-notificaciones/todas-mis-notificaciones.component\";\n\nconst routes: Routes = [\n  {\n    path: 'listar-procesos',\n    component: ListarProcesosComponent,\n  },\n  {\n    path: 'agregar-proceso/:accion',\n    component: AgregarProcesoComponent,\n  },\n  {\n    path: 'mostrar-proceso/:id',\n    component: MostrarProcesoComponent,\n  },\n  {\n    path: 'actualizar-proceso/:accion/:id',\n    component: AgregarProcesoComponent,\n  },\n  /**\n   *  API ejecutivo\n   */\n  {\n    path: 'agregar-ejecutivo/:accion/:proceso',\n    component: AgregarEjecutivoComponent,\n  },\n  {\n    path: 'actualizar-ejecutivo/:accion/:proceso',\n    component: AgregarEjecutivoComponent,\n  },\n  /**\n   * API actuaciones\n   */\n  {\n    path: 'agregar-actuacion/:accion/:proceso',\n    component: AgregarActuacionComponent,\n  },\n  {\n    path: 'listar-actuaciones/:proceso',\n    component: ListarActuacionesComponent,\n  },\n  {\n    path: 'actualizar-actuacion/:accion/:id',\n    component: AgregarActuacionComponent,\n  },\n  {\n    path: 'mostrar-actuacion/:id',\n    component: MostrarActuacionComponent\n  },\n  /**\n   * API cautelar\n   */\n  {\n    path: 'agregar-cautelar/:accion/:proceso',\n    component: AgregarCautelarComponent,\n  },\n  {\n    path: 'listar-cautelares/:proceso',\n    component: ListarCautelarComponent,\n  },\n  {\n    path: 'mostrar-cautelar/:id',\n    component: MostrarCautelarComponent,\n  },\n  {\n    path: 'actualizar-cautelar/:accion/:id',\n    component: AgregarCautelarComponent,\n  },\n  /**\n   * API notificaciones\n   */\n  {\n    path: 'agregar-notificacion/:accion/:proceso',\n    component: AgregarNotificacionComponent,\n  },\n  {\n    path: 'actualizar-notificacion/:accion/:id',\n    component: AgregarNotificacionComponent,\n  },\n  {\n    path: 'listar-notificaciones/:proceso',\n    component: ListarNotificacionesComponent,\n  },\n  {\n    path: 'mostrar-notificacion/:id',\n    component: MostrarNotificacionComponent,\n  },\n  {\n    path: 'todas-notificaciones',\n    component: TodasMisNotificacionesComponent,\n  },\n  /**\n   * archivos\n   */\n  {\n    path: 'agregar-archivo/:accion/:proceso',\n    component: AgregarArchivoComponent,\n  },\n  {\n    path: 'listar-archivos/:proceso',\n    component: ListarArchivosComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProcesosRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatButtonModule} from '@angular/material/button';  \nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field'; \nimport {MatInputModule} from '@angular/material/input'; \nimport {MatDatepickerModule} from '@angular/material/datepicker'; \nimport { MatNativeDateModule } from '@angular/material/core';\nimport {MatDialogModule} from '@angular/material/dialog'; \nimport {MatCardModule} from '@angular/material/card'; \nimport {MatListModule} from '@angular/material/list'; \nimport {MatGridListModule} from '@angular/material/grid-list'; \nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatToolbarModule} from '@angular/material/toolbar'; \nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\n\nimport { CompartidosModule } from \"../compartidos/compartidos.module\";\n\nimport { ProcesosRoutingModule } from './procesos-routing.module';\nimport { ListarProcesosComponent } from './proceso/listar-procesos/listar-procesos.component';\nimport { MostrarProcesoComponent } from './proceso/mostrar-proceso/mostrar-proceso.component';\nimport { AgregarProcesoComponent } from './proceso/agregar-proceso/agregar-proceso.component';\nimport { PartesComponent } from './partes_proceso/partes/partes.component';\nimport { AgregarEjecutivoComponent } from './ejecutivo/agregar-ejecutivo/agregar-ejecutivo.component';\nimport { PartesJuridicasComponent } from './partes_proceso/partes-juridicas/partes-juridicas.component';\nimport { AgregarActuacionComponent } from \"./actuaciones/agregar-actuacion/agregar-actuacion.component\";\nimport { ListarActuacionesComponent } from \"./actuaciones/listar-actuaciones/listar-actuaciones.component\";\nimport { AgregarCautelarComponent } from './calutelares/agregar-cautelar/agregar-cautelar.component';\nimport { ListarCautelarComponent } from './calutelares/listar-cautelar/listar-cautelar.component';\nimport { ListarNotificacionesComponent } from './notificaciones/listar-notificaciones/listar-notificaciones.component';\nimport { AgregarNotificacionComponent } from './notificaciones/agregar-notificacion/agregar-notificacion.component';\nimport { MostrarNotificacionComponent } from './notificaciones/mostrar-notificacion/mostrar-notificacion.component';\nimport { AgregarArchivoComponent } from './archivos/agregar-archivo/agregar-archivo.component';\nimport { DespachoComponent } from './despachos/despacho/despacho.component';\nimport { PersonasNotificadasComponent } from './notificaciones/personas-notificadas/personas-notificadas.component';\nimport { EmpresasNotificadasComponent } from './notificaciones/empresas-notificadas/empresas-notificadas.component';\nimport { MostrarActuacionComponent } from './actuaciones/mostrar-actuacion/mostrar-actuacion.component';\nimport { ListarArchivosComponent } from './archivos/listar-archivos/listar-archivos.component';\nimport { ArchivoNombrePipe } from './pipes/archivo-nombre.pipe';\nimport { MostrarCautelarComponent } from './calutelares/mostrar-cautelar/mostrar-cautelar.component';\nimport { TodasMisNotificacionesComponent } from './todas-mis-notificaciones/todas-mis-notificaciones.component';\n\n@NgModule({\n  declarations: [\n    ListarProcesosComponent, \n    MostrarProcesoComponent, \n    AgregarProcesoComponent, \n    PartesComponent, \n    AgregarEjecutivoComponent, \n    PartesJuridicasComponent,\n    AgregarActuacionComponent,\n    ListarActuacionesComponent,\n    AgregarCautelarComponent,\n    ListarCautelarComponent,\n    ListarNotificacionesComponent,\n    AgregarNotificacionComponent,\n    MostrarNotificacionComponent,\n    AgregarArchivoComponent,\n    DespachoComponent,\n    PersonasNotificadasComponent,\n    EmpresasNotificadasComponent,\n    MostrarActuacionComponent,\n    ListarArchivosComponent,\n    ArchivoNombrePipe,\n    MostrarCautelarComponent,\n    TodasMisNotificacionesComponent\n  ],\n  imports: [\n    CommonModule,\n    ProcesosRoutingModule,\n    CompartidosModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatCardModule,\n    MatListModule,\n    MatGridListModule,\n    MatAutocompleteModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatBadgeModule,\n    MatRadioModule,\n    MatSlideToggleModule,\n    MatSnackBarModule\n  ]\n})\nexport class ProcesosModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Proceso{\n  id : number;\n  numero_proceso : string;\n  despacho : number;\n  user : number;\n  tipo : string;\n  estado : string;\n  listisconsorcio : string;\n  descripcion : string;\n  fecha_providencia : any;\n  fecha_publicacion : any;\n  fecha_finalizacion : any; \n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProcesoService {\n  private url = \"http://127.0.0.1:8000/api/v1.0/procesos/procesos/\"\n  private urlEjecutivo = \"http://127.0.0.1:8000/api/v1.0/procesos/ejecutivos/\"\n  private urlActuaciones = \"http://127.0.0.1:8000/api/v1.0/procesos/actuaciones/\"\n  private urlCautelar = \"http://127.0.0.1:8000/api/v1.0/procesos/cautelares/\"\n  private urlNotificacion = \"http://127.0.0.1:8000/api/v1.0/procesos/notificaciones/\"\n  private urlArchivos = \"http://127.0.0.1:8000/api/v1.0/procesos/archivos/\"\n  constructor(private http: HttpClient) { }\n\n  /**\n   * agregarProcesos\n   */\n  public agregarProcesos(proceso: Proceso) {\n    return this.http.post(this.url, proceso)\n  }\n\n  /**\n   * eliminarProceso\n   */\n  public eliminarProceso(id: number) {\n    const ruta = `${this.url}${id}`\n    return this.http.delete(ruta)\n  }\n\n  /**\n   * mostrarProceso\n   */\n  public mostrarProceso(id: number) {\n    const ruta = `${this.url}${id}`\n    return this.http.get(ruta)\n  }\n\n  public obtenerProcesos(urlPaginacion:any) {\n    return this.http.get(urlPaginacion);\n  }\n  public iniciarListadoProcesos() {\n    return this.http.get(this.url);\n  }\n\n  /**\n   * listrarProcesoId\n   */\n  public listarProcesosId(numero_proceso:number) {\n    let urlProcesos = `${this.url}?numero_proceso=${numero_proceso}`\n    return this.http.get(urlProcesos);\n  }\n\n  public actualizarProceso(id:number, proceso:Proceso){\n    const ruta = `${this.url}${id}/`\n    return this.http.put(ruta, proceso);\n  }\n\n  public listarDespachos(despacho:string){\n    const ruta = `http://127.0.0.1:8000/api/v1.0/procesos/despachos?despacho=${despacho}`\n    return this.http.get(ruta)\n  }\n  /**\n   * permite obtener la informacion de la parte ejecutiva del proceso\n   */\n  public obtenerEjecutivo(proceso: number) {\n    const ruta = `${this.urlEjecutivo}${proceso}`\n    return this.http.get(ruta)\n  }\n  /**\n   * agregar la informacion extra que define el proceso como ejecutivo\n   */\n  public agregarEjecutivo(ejecutivo:any) {\n    return this.http.post(this.urlEjecutivo, ejecutivo)\n  }\n\n  public actualizarEjecutivo(id:number, ejecutivo:any){\n    const ruta = `${this.urlEjecutivo}${id}/`\n    return this.http.put(ruta, ejecutivo);\n  }\n\n    /** \n    Estos metodos pertenecen a la API de partes naturales\n  */\n  /**\n   *  este metodo lista las personanas naturales vinculadas a un proceso para \n   * llenar un formulario de auto-completar\n   */\n  public listarPartesNaturales(nombre:string) {\n    const ruta = `http://127.0.0.1:8000/api/v1.0/abogado/personas/partesPersonas?nombre=${nombre}`\n    return this.http.get(ruta)\n  }\n\n  public agregarParteNatural(persona:any){\n    const ruta = `http://127.0.0.1:8000/api/v1.0/procesos/partes_naturales/` \n    return this.http.post(ruta, persona)\n  }\n\n  public eliminarParteNatural(id:number){\n    const ruta = `http://127.0.0.1:8000/api/v1.0/procesos/partes_naturales/${id}` \n    return this.http.delete(ruta)\n  }\n\n  /** \n    Estos metodos pertenecen a la API de partes juridicas\n  */\n  public listarPartesJuridicas(nombre:string) {\n    const ruta = `http://127.0.0.1:8000/api/v1.0/abogado/empresas/partesJuridicas?nombre=${nombre}`\n    return this.http.get(ruta)\n  }\n\n  public agregarParteJuridica(persona:any){\n    const ruta = `http://127.0.0.1:8000/api/v1.0/procesos/partes_juridico/` \n    return this.http.post(ruta, persona)\n  }\n\n  public eliminarParteJuridica(id:number){\n    const ruta = `http://127.0.0.1:8000/api/v1.0/procesos/partes_juridico/${id}` \n    return this.http.delete(ruta)\n  }\n\n  /** \n    Estos metodos pertenecen a la API de actuaciones\n  */\n  public mostrarActuacion(id:number){\n    const ruta = `${this.urlActuaciones}${id}/`\n    return this.http.get(ruta)\n  }\n  public contarActuaciones(proceso:number){\n    return this.http.get(`${this.urlActuaciones}${proceso}/contar_actuaciones`)\n  }\n  public agregarActuacion(actuacion:any){\n    return this.http.post(this.urlActuaciones, actuacion)\n  }\n  public actualizarActuacion(actuacion:any, id: number){\n    const ruta = `${this.urlActuaciones}${id}/`\n    return this.http.put(ruta, actuacion)\n  }\n  public iniciarListadoActuaciones(proceso:number){\n    return this.http.get(`${this.urlActuaciones}${proceso}/listar_actuaciones`)\n  }\n  public obtenerActuaciones(urlPaginacion:any) {\n    return this.http.get(urlPaginacion);\n  }\n  public obtenerActuacion(id:number){\n    return this.http.get(`${this.urlActuaciones}${id}`)\n  }\n  public eliminarActuacion(id:number){\n    return this.http.delete(`${this.urlActuaciones}${id}/`)\n  }\n\n  /**\n   * metodos para la API de medidas cautelares\n   */\n\n  public mostrarCautelar(id:number){\n    return this.http.get(`${this.urlCautelar}${id}/`)\n  }\n  public agregarCautelar(cautelar:any){\n    return this.http.post(this.urlCautelar, cautelar)\n  }\n  public actualizarCautelar(cautelar:any, id:number){\n    return this.http.put(`${this.urlCautelar}${id}/`, cautelar)\n  }\n  public iniciarListadoCautelares(proceso:number){\n    return this.http.get(`${this.urlCautelar}${proceso}/listar_cautelares`)\n  }\n  public obtenerCautelares(urlPaginacion:any) {\n    return this.http.get(urlPaginacion);\n  }\n  public eliminarCautelar(id:number){\n    return this.http.delete(`${this.urlCautelar}${id}`)\n  }\n  public contarCautelares(proceso:number){\n    return this.http.get(`${this.urlCautelar}${proceso}/contar_cautelares`)\n  }\n\n  /**\n   * metodos para la API de notificaciones\n   */\n  public todasNotificaciones(){\n    return this.http.get(`${this.urlNotificacion}todasNotificaciones/`)\n  }\n  public mostrarNotificacion(id:number){\n    return this.http.get(`${this.urlNotificacion}${id}/`)\n  }\n  public eliminarNotificacion(id:number){\n    return this.http.delete(`${this.urlNotificacion}${id}/`)\n  }\n  public agregarNotificacion(notificacion:any){\n    return this.http.post(this.urlNotificacion, notificacion)\n  }\n  public actualizarNotificacion(notificacion:any, id:number){\n    return this.http.put(`${this.urlNotificacion}${id}/`, notificacion)\n  }\n  public iniciarlistadoNotificaciones(proceso:number){\n    return this.http.get(`${this.urlNotificacion}${proceso}/listar_notificaciones`)\n  }\n  public obtenerNotificaciones(urlPaginacion:any) {\n    return this.http.get(urlPaginacion);\n  }\n  public contarNotificaciones(proceso:number){\n    return this.http.get(`${this.urlNotificacion}${proceso}/contar_notificaciones`)\n  }\n  public alertaNotificaciones(proceso:number){\n    return this.http.get(`${this.urlNotificacion}${proceso}/alerta`)\n  }\n  public agregarPersonaNotificada(notificado:any){\n    return this.http.post(`http://127.0.0.1:8000/api/v1.0/procesos/personas_notificadas/`, notificado)\n  }\n  public eliminarPersonaNotificada(id:number){\n    return this.http.delete(`http://127.0.0.1:8000/api/v1.0/procesos/personas_notificadas/${id}`)\n  }\n  public agregarEmpresaNotificada(notificado:any){\n    return this.http.post(`http://127.0.0.1:8000/api/v1.0/procesos/empresas_notificadas/`, notificado)\n  }\n  public eliminarEmpresaNotificada(id:number){\n    return this.http.delete(`http://127.0.0.1:8000/api/v1.0/procesos/empresas_notificadas/${id}`)\n  }\n  /**\n   * metodos para la API de archivos \n   */\n\n  public mostrarArchivo(id:number){\n    return this.http.get(`${this.urlArchivos}${id}/`)\n  }\n  public agregarArchivo(archivo:any){\n    return this.http.post(this.urlArchivos, archivo)\n  }\n  public actualizarArchivo(archivo:any, id:number){\n    return this.http.put(`${this.urlArchivos}${id}/`, archivo)\n  }\n  public iniciarListadoArchivos(proceso:number){\n    return this.http.get(`${this.urlArchivos}${proceso}/listar_archivos`)\n  }\n  public contarArchivos(proceso:number){\n    return this.http.get(`${this.urlArchivos}${proceso}/contar_archivos`)\n  }\n  public obtenerArchivos(urlPaginacion:any){\n    return this.http.get(urlPaginacion);\n  }\n  public eliminarArchivo(id:number){\n    return this.http.delete(`${this.urlArchivos}${id}`)\n  }\n\n  /**\n   * consulatar despacho\n   */\n  public obtenerDespacho(id:number){\n    return this.http.get(`http://127.0.0.1:8000/api/v1.0/despacho/${id}/`)\n  }\n}\n\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ProcesoService } from \"../servicios/proceso.service\";\nimport {MatPaginator} from '@angular/material/paginator';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-todas-mis-notificaciones',\n  templateUrl: './todas-mis-notificaciones.component.html',\n  styleUrls: ['./todas-mis-notificaciones.component.css']\n})\nexport class TodasMisNotificacionesComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  notificaciones:any;\n  count : number;\n  next : number;\n  previous : number;\n  pageIndex : number;\n  displayedColumns: string[] = ['tipo', 'limite', 'acciones'];\n  constructor(private route: ActivatedRoute, private procesoService: ProcesoService) { }\n\n  ngOnInit(): void {\n    this.listadoInicial()\n  }\n\n  ngAfterViewInit() {\n    this.paginator.page.subscribe(\n       (event) => this.obtenerListadoNotificaciones(event)\n    );\n  }\n\n  listadoInicial(){\n    this.procesoService.todasNotificaciones().subscribe(data => {\n      this.notificaciones = data['results'];\n      this.count = data['count'];\n      this.next = data['next'];\n      this.previous = data['previous'];\n      this.pageIndex = 0;\n      console.log(data)\n    })\n  }\n\n  public obtenerListadoNotificaciones(event:any):void {\n\n  }\n\n}\n","<mat-card>\n  <table mat-table [dataSource]=\"notificaciones\" class=\"mat-elevation-z8\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Position Column -->\n    <ng-container matColumnDef=\"tipo\">\n      <th mat-header-cell *matHeaderCellDef>Tipo</th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.tipo}} </td>\n    </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"limite\">\n        <th mat-header-cell *matHeaderCellDef> Limite </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.limite}} </td>\n      </ng-container>\n  \n    <ng-container matColumnDef=\"acciones\">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef=\"let element\">  \n        <a routerLink=\"/dashboard/proceso/mostrar-proceso/{{element.proceso}}\" mat-icon-button color=\"accent\">\n          <mat-icon>alarm</mat-icon>\n        </a>\n      </td>\n    </ng-container>\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n  \n    <mat-paginator  [length]=\"count\"\n                    [pageSize]=\"5\"\n    >\n    </mat-paginator>\n  \n</mat-card>"],"sourceRoot":"webpack:///"}